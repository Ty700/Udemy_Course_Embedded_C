
Keypad_Interfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001540  08001540  00011540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001588  08001588  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001588  08001588  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001588  08001588  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001588  08001588  00011588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800158c  0800158c  0001158c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000a22  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000351  00000000  00000000  00020af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000118  00000000  00000000  00020e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000bf  00000000  00000000  00020f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002d05  00000000  00000000  0002101f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001344  00000000  00000000  00023d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000992e  00000000  00000000  00025068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000b5c  00000000  00000000  0002e998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0002f4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001528 	.word	0x08001528

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001528 	.word	0x08001528

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
 * PD2 -> R3
 * PD3 -> R4
 */

int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08a      	sub	sp, #40	; 0x28
 8000274:	af00      	add	r7, sp, #0
	volatile uint32_t *const pClkCtrl 		= AHB1_GPIOx_CLK_EN;
 8000276:	4b7f      	ldr	r3, [pc, #508]	; (8000474 <main+0x204>)
 8000278:	61bb      	str	r3, [r7, #24]
	volatile uint32_t *const pGPIODMode 	= GPIOD_MODE;
 800027a:	4b7f      	ldr	r3, [pc, #508]	; (8000478 <main+0x208>)
 800027c:	617b      	str	r3, [r7, #20]
	volatile uint32_t *const pGPIODPullRes	= GPIOD_PUPD_RES;
 800027e:	4b7f      	ldr	r3, [pc, #508]	; (800047c <main+0x20c>)
 8000280:	613b      	str	r3, [r7, #16]
	volatile uint32_t *const pGPIODInput   	= GPIOD_INPUT_DATA;
 8000282:	4b7f      	ldr	r3, [pc, #508]	; (8000480 <main+0x210>)
 8000284:	60fb      	str	r3, [r7, #12]
	volatile uint32_t *const pGPIODOutput  	= GPIOD_OUTPUT_DATA;
 8000286:	4b7f      	ldr	r3, [pc, #508]	; (8000484 <main+0x214>)
 8000288:	60bb      	str	r3, [r7, #8]

	/* Enalbes RCC Clk for GPIOD Ports */
	*pClkCtrl |= (1 << 3);
 800028a:	69bb      	ldr	r3, [r7, #24]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f043 0208 	orr.w	r2, r3, #8
 8000292:	69bb      	ldr	r3, [r7, #24]
 8000294:	601a      	str	r2, [r3, #0]

	/* Changes PD0 - 3 to OUTPUT Mode*/
	*pGPIODMode &= ~(0xFF);
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	601a      	str	r2, [r3, #0]
	*pGPIODMode |= (0x55);
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f043 0255 	orr.w	r2, r3, #85	; 0x55
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	601a      	str	r2, [r3, #0]

	/* Changes PD8 - 11 INPUT Mode */
	*pGPIODMode &= ~(0xFF << 16);
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	601a      	str	r2, [r3, #0]

	/* Enalbes Pull UP Resisters for PD8 - 11 */
	*pGPIODPullRes &= (0xFF << 16);
 80002ba:	693b      	ldr	r3, [r7, #16]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	601a      	str	r2, [r3, #0]
	*pGPIODPullRes |= (0x55 << 16);
 80002c6:	693b      	ldr	r3, [r7, #16]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f443 02aa 	orr.w	r2, r3, #5570560	; 0x550000
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	601a      	str	r2, [r3, #0]

	*pGPIODOutput |= 0x0F;
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f043 020f 	orr.w	r2, r3, #15
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	601a      	str	r2, [r3, #0]

	uint8_t* buttonPushed = (uint8_t *)calloc(1, sizeof(uint8_t));
 80002de:	2101      	movs	r1, #1
 80002e0:	2001      	movs	r0, #1
 80002e2:	f000 f9cb 	bl	800067c <calloc>
 80002e6:	4603      	mov	r3, r0
 80002e8:	607b      	str	r3, [r7, #4]

	while (1) {
	    /* Turning one ROW to LOW, and checking COL */
	    for (int ROW = 0; ROW < 4; ROW++) {
 80002ea:	2300      	movs	r3, #0
 80002ec:	627b      	str	r3, [r7, #36]	; 0x24
 80002ee:	e0bb      	b.n	8000468 <main+0x1f8>
	        *pGPIODOutput &= ~(1 << ROW);  // Set the ROW to LOW
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2101      	movs	r1, #1
 80002f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80002f8:	fa01 f202 	lsl.w	r2, r1, r2
 80002fc:	43d2      	mvns	r2, r2
 80002fe:	401a      	ands	r2, r3
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	601a      	str	r2, [r3, #0]

	        /* Check COL now */
	        for (int COL = 0; COL < 4; COL++) {
 8000304:	2300      	movs	r3, #0
 8000306:	623b      	str	r3, [r7, #32]
 8000308:	e087      	b.n	800041a <main+0x1aa>
	            /* Button push detected */
	            /* +8 b/c COL input start @ PD8 */
	            if (!(*pGPIODInput & (1 << (COL + 8)))) {  // Check if COL input is LOW
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	6a3a      	ldr	r2, [r7, #32]
 8000310:	3208      	adds	r2, #8
 8000312:	2101      	movs	r1, #1
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	4013      	ands	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	d17a      	bne.n	8000414 <main+0x1a4>
//	                printf("Button detected at ROW %d, COL %d\n", ROW, COL); // Debug print

	                /* Detecting which button is pushed */
	                if (ROW == 0) {
 800031e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000320:	2b00      	cmp	r3, #0
 8000322:	d11b      	bne.n	800035c <main+0xec>
	                    if (COL == 0) { *buttonPushed = '1'; }
 8000324:	6a3b      	ldr	r3, [r7, #32]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d103      	bne.n	8000332 <main+0xc2>
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2231      	movs	r2, #49	; 0x31
 800032e:	701a      	strb	r2, [r3, #0]
 8000330:	e070      	b.n	8000414 <main+0x1a4>
	                    else if (COL == 1) { *buttonPushed = '2'; }
 8000332:	6a3b      	ldr	r3, [r7, #32]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d103      	bne.n	8000340 <main+0xd0>
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2232      	movs	r2, #50	; 0x32
 800033c:	701a      	strb	r2, [r3, #0]
 800033e:	e069      	b.n	8000414 <main+0x1a4>
	                    else if (COL == 2) { *buttonPushed = '3'; }
 8000340:	6a3b      	ldr	r3, [r7, #32]
 8000342:	2b02      	cmp	r3, #2
 8000344:	d103      	bne.n	800034e <main+0xde>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2233      	movs	r2, #51	; 0x33
 800034a:	701a      	strb	r2, [r3, #0]
 800034c:	e062      	b.n	8000414 <main+0x1a4>
	                    else if (COL == 3) { *buttonPushed = 'A'; }
 800034e:	6a3b      	ldr	r3, [r7, #32]
 8000350:	2b03      	cmp	r3, #3
 8000352:	d15f      	bne.n	8000414 <main+0x1a4>
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2241      	movs	r2, #65	; 0x41
 8000358:	701a      	strb	r2, [r3, #0]
 800035a:	e05b      	b.n	8000414 <main+0x1a4>
	                } else if (ROW == 1) {
 800035c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800035e:	2b01      	cmp	r3, #1
 8000360:	d11b      	bne.n	800039a <main+0x12a>
	                    if (COL == 0) { *buttonPushed = '4'; }
 8000362:	6a3b      	ldr	r3, [r7, #32]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d103      	bne.n	8000370 <main+0x100>
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2234      	movs	r2, #52	; 0x34
 800036c:	701a      	strb	r2, [r3, #0]
 800036e:	e051      	b.n	8000414 <main+0x1a4>
	                    else if (COL == 1) { *buttonPushed = '5'; }
 8000370:	6a3b      	ldr	r3, [r7, #32]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d103      	bne.n	800037e <main+0x10e>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2235      	movs	r2, #53	; 0x35
 800037a:	701a      	strb	r2, [r3, #0]
 800037c:	e04a      	b.n	8000414 <main+0x1a4>
	                    else if (COL == 2) { *buttonPushed = '6'; }
 800037e:	6a3b      	ldr	r3, [r7, #32]
 8000380:	2b02      	cmp	r3, #2
 8000382:	d103      	bne.n	800038c <main+0x11c>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2236      	movs	r2, #54	; 0x36
 8000388:	701a      	strb	r2, [r3, #0]
 800038a:	e043      	b.n	8000414 <main+0x1a4>
	                    else if (COL == 3) { *buttonPushed = 'B'; }
 800038c:	6a3b      	ldr	r3, [r7, #32]
 800038e:	2b03      	cmp	r3, #3
 8000390:	d140      	bne.n	8000414 <main+0x1a4>
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2242      	movs	r2, #66	; 0x42
 8000396:	701a      	strb	r2, [r3, #0]
 8000398:	e03c      	b.n	8000414 <main+0x1a4>
	                } else if (ROW == 2) {
 800039a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800039c:	2b02      	cmp	r3, #2
 800039e:	d11b      	bne.n	80003d8 <main+0x168>
	                    if (COL == 0) { *buttonPushed = '7'; }
 80003a0:	6a3b      	ldr	r3, [r7, #32]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d103      	bne.n	80003ae <main+0x13e>
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2237      	movs	r2, #55	; 0x37
 80003aa:	701a      	strb	r2, [r3, #0]
 80003ac:	e032      	b.n	8000414 <main+0x1a4>
	                    else if (COL == 1) { *buttonPushed = '8'; }
 80003ae:	6a3b      	ldr	r3, [r7, #32]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d103      	bne.n	80003bc <main+0x14c>
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2238      	movs	r2, #56	; 0x38
 80003b8:	701a      	strb	r2, [r3, #0]
 80003ba:	e02b      	b.n	8000414 <main+0x1a4>
	                    else if (COL == 2) { *buttonPushed = '9'; }
 80003bc:	6a3b      	ldr	r3, [r7, #32]
 80003be:	2b02      	cmp	r3, #2
 80003c0:	d103      	bne.n	80003ca <main+0x15a>
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2239      	movs	r2, #57	; 0x39
 80003c6:	701a      	strb	r2, [r3, #0]
 80003c8:	e024      	b.n	8000414 <main+0x1a4>
	                    else if (COL == 3) { *buttonPushed = 'C'; }
 80003ca:	6a3b      	ldr	r3, [r7, #32]
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	d121      	bne.n	8000414 <main+0x1a4>
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2243      	movs	r2, #67	; 0x43
 80003d4:	701a      	strb	r2, [r3, #0]
 80003d6:	e01d      	b.n	8000414 <main+0x1a4>
	                } else if (ROW == 3) {
 80003d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003da:	2b03      	cmp	r3, #3
 80003dc:	d11a      	bne.n	8000414 <main+0x1a4>
	                    if (COL == 0) { *buttonPushed = '*'; }
 80003de:	6a3b      	ldr	r3, [r7, #32]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d103      	bne.n	80003ec <main+0x17c>
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	222a      	movs	r2, #42	; 0x2a
 80003e8:	701a      	strb	r2, [r3, #0]
 80003ea:	e013      	b.n	8000414 <main+0x1a4>
	                    else if (COL == 1) { *buttonPushed = '0'; }
 80003ec:	6a3b      	ldr	r3, [r7, #32]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d103      	bne.n	80003fa <main+0x18a>
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2230      	movs	r2, #48	; 0x30
 80003f6:	701a      	strb	r2, [r3, #0]
 80003f8:	e00c      	b.n	8000414 <main+0x1a4>
	                    else if (COL == 2) { *buttonPushed = '#'; }
 80003fa:	6a3b      	ldr	r3, [r7, #32]
 80003fc:	2b02      	cmp	r3, #2
 80003fe:	d103      	bne.n	8000408 <main+0x198>
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2223      	movs	r2, #35	; 0x23
 8000404:	701a      	strb	r2, [r3, #0]
 8000406:	e005      	b.n	8000414 <main+0x1a4>
	                    else if (COL == 3) { *buttonPushed = 'D'; }
 8000408:	6a3b      	ldr	r3, [r7, #32]
 800040a:	2b03      	cmp	r3, #3
 800040c:	d102      	bne.n	8000414 <main+0x1a4>
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2244      	movs	r2, #68	; 0x44
 8000412:	701a      	strb	r2, [r3, #0]
	        for (int COL = 0; COL < 4; COL++) {
 8000414:	6a3b      	ldr	r3, [r7, #32]
 8000416:	3301      	adds	r3, #1
 8000418:	623b      	str	r3, [r7, #32]
 800041a:	6a3b      	ldr	r3, [r7, #32]
 800041c:	2b03      	cmp	r3, #3
 800041e:	f77f af74 	ble.w	800030a <main+0x9a>

	            }
	        }

	        /* Make shift button debouncing delay */
	        for (int i = 0; i < DELAY; i++);
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
 8000426:	e002      	b.n	800042e <main+0x1be>
 8000428:	69fb      	ldr	r3, [r7, #28]
 800042a:	3301      	adds	r3, #1
 800042c:	61fb      	str	r3, [r7, #28]
 800042e:	69fb      	ldr	r3, [r7, #28]
 8000430:	4a15      	ldr	r2, [pc, #84]	; (8000488 <main+0x218>)
 8000432:	4293      	cmp	r3, r2
 8000434:	ddf8      	ble.n	8000428 <main+0x1b8>

	        *pGPIODOutput |= (1 << ROW);  // Set the ROW back to HIGH
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2101      	movs	r1, #1
 800043c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800043e:	fa01 f202 	lsl.w	r2, r1, r2
 8000442:	431a      	orrs	r2, r3
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	601a      	str	r2, [r3, #0]

	        if(*buttonPushed != '\0'){
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d005      	beq.n	800045c <main+0x1ec>
	        	printf("BUTTON PUSHED: %c\n", *buttonPushed);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4619      	mov	r1, r3
 8000456:	480d      	ldr	r0, [pc, #52]	; (800048c <main+0x21c>)
 8000458:	f000 fa9c 	bl	8000994 <iprintf>
            }
	        *buttonPushed = '\0';
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2200      	movs	r2, #0
 8000460:	701a      	strb	r2, [r3, #0]
	    for (int ROW = 0; ROW < 4; ROW++) {
 8000462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000464:	3301      	adds	r3, #1
 8000466:	627b      	str	r3, [r7, #36]	; 0x24
 8000468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800046a:	2b03      	cmp	r3, #3
 800046c:	f77f af40 	ble.w	80002f0 <main+0x80>
 8000470:	e73b      	b.n	80002ea <main+0x7a>
 8000472:	bf00      	nop
 8000474:	40023830 	.word	0x40023830
 8000478:	40020c00 	.word	0x40020c00
 800047c:	40020c0c 	.word	0x40020c0c
 8000480:	40020c10 	.word	0x40020c10
 8000484:	40020c14 	.word	0x40020c14
 8000488:	0001869f 	.word	0x0001869f
 800048c:	08001540 	.word	0x08001540

08000490 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <ITM_SendChar+0x48>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <ITM_SendChar+0x48>)
 80004a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004a4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <ITM_SendChar+0x4c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a0c      	ldr	r2, [pc, #48]	; (80004dc <ITM_SendChar+0x4c>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004b2:	bf00      	nop
 80004b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d0f8      	beq.n	80004b4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	6013      	str	r3, [r2, #0]
}
 80004ca:	bf00      	nop
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	e000edfc 	.word	0xe000edfc
 80004dc:	e0000e00 	.word	0xe0000e00

080004e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	e00a      	b.n	8000508 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004f2:	f3af 8000 	nop.w
 80004f6:	4601      	mov	r1, r0
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	1c5a      	adds	r2, r3, #1
 80004fc:	60ba      	str	r2, [r7, #8]
 80004fe:	b2ca      	uxtb	r2, r1
 8000500:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	3301      	adds	r3, #1
 8000506:	617b      	str	r3, [r7, #20]
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	429a      	cmp	r2, r3
 800050e:	dbf0      	blt.n	80004f2 <_read+0x12>
  }

  return len;
 8000510:	687b      	ldr	r3, [r7, #4]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b086      	sub	sp, #24
 800051e:	af00      	add	r7, sp, #0
 8000520:	60f8      	str	r0, [r7, #12]
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	e009      	b.n	8000540 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	60ba      	str	r2, [r7, #8]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ffab 	bl	8000490 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	3301      	adds	r3, #1
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	429a      	cmp	r2, r3
 8000546:	dbf1      	blt.n	800052c <_write+0x12>
  }
  return len;
 8000548:	687b      	ldr	r3, [r7, #4]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <_close>:

int _close(int file)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800055a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800055e:	4618      	mov	r0, r3
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800057a:	605a      	str	r2, [r3, #4]
  return 0;
 800057c:	2300      	movs	r3, #0
}
 800057e:	4618      	mov	r0, r3
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <_isatty>:

int _isatty(int file)
{
 800058a:	b480      	push	{r7}
 800058c:	b083      	sub	sp, #12
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
	...

080005bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c4:	4a14      	ldr	r2, [pc, #80]	; (8000618 <_sbrk+0x5c>)
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <_sbrk+0x60>)
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d102      	bne.n	80005de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <_sbrk+0x64>)
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <_sbrk+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <_sbrk+0x64>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d207      	bcs.n	80005fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005ec:	f000 fa86 	bl	8000afc <__errno>
 80005f0:	4603      	mov	r3, r0
 80005f2:	220c      	movs	r2, #12
 80005f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005fa:	e009      	b.n	8000610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <_sbrk+0x64>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	4a05      	ldr	r2, [pc, #20]	; (8000620 <_sbrk+0x64>)
 800060c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20020000 	.word	0x20020000
 800061c:	00000400 	.word	0x00000400
 8000620:	20000078 	.word	0x20000078
 8000624:	200001c8 	.word	0x200001c8

08000628 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800062a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800062c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <LoopForever+0x6>)
  ldr r1, =_edata
 8000632:	490d      	ldr	r1, [pc, #52]	; (8000668 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <LoopForever+0xe>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000648:	4c0a      	ldr	r4, [pc, #40]	; (8000674 <LoopForever+0x16>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000656:	f000 fa57 	bl	8000b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065a:	f7ff fe09 	bl	8000270 <main>

0800065e <LoopForever>:

LoopForever:
  b LoopForever
 800065e:	e7fe      	b.n	800065e <LoopForever>
  ldr   r0, =_estack
 8000660:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000668:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800066c:	08001590 	.word	0x08001590
  ldr r2, =_sbss
 8000670:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000674:	200001c8 	.word	0x200001c8

08000678 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC_IRQHandler>
	...

0800067c <calloc>:
 800067c:	4b02      	ldr	r3, [pc, #8]	; (8000688 <calloc+0xc>)
 800067e:	460a      	mov	r2, r1
 8000680:	4601      	mov	r1, r0
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	f000 b802 	b.w	800068c <_calloc_r>
 8000688:	20000058 	.word	0x20000058

0800068c <_calloc_r>:
 800068c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800068e:	fba1 2402 	umull	r2, r4, r1, r2
 8000692:	b94c      	cbnz	r4, 80006a8 <_calloc_r+0x1c>
 8000694:	4611      	mov	r1, r2
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	f000 f82e 	bl	80006f8 <_malloc_r>
 800069c:	9a01      	ldr	r2, [sp, #4]
 800069e:	4605      	mov	r5, r0
 80006a0:	b930      	cbnz	r0, 80006b0 <_calloc_r+0x24>
 80006a2:	4628      	mov	r0, r5
 80006a4:	b003      	add	sp, #12
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	220c      	movs	r2, #12
 80006aa:	6002      	str	r2, [r0, #0]
 80006ac:	2500      	movs	r5, #0
 80006ae:	e7f8      	b.n	80006a2 <_calloc_r+0x16>
 80006b0:	4621      	mov	r1, r4
 80006b2:	f000 f9c4 	bl	8000a3e <memset>
 80006b6:	e7f4      	b.n	80006a2 <_calloc_r+0x16>

080006b8 <sbrk_aligned>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	4e0e      	ldr	r6, [pc, #56]	; (80006f4 <sbrk_aligned+0x3c>)
 80006bc:	460c      	mov	r4, r1
 80006be:	6831      	ldr	r1, [r6, #0]
 80006c0:	4605      	mov	r5, r0
 80006c2:	b911      	cbnz	r1, 80006ca <sbrk_aligned+0x12>
 80006c4:	f000 f9f8 	bl	8000ab8 <_sbrk_r>
 80006c8:	6030      	str	r0, [r6, #0]
 80006ca:	4621      	mov	r1, r4
 80006cc:	4628      	mov	r0, r5
 80006ce:	f000 f9f3 	bl	8000ab8 <_sbrk_r>
 80006d2:	1c43      	adds	r3, r0, #1
 80006d4:	d00a      	beq.n	80006ec <sbrk_aligned+0x34>
 80006d6:	1cc4      	adds	r4, r0, #3
 80006d8:	f024 0403 	bic.w	r4, r4, #3
 80006dc:	42a0      	cmp	r0, r4
 80006de:	d007      	beq.n	80006f0 <sbrk_aligned+0x38>
 80006e0:	1a21      	subs	r1, r4, r0
 80006e2:	4628      	mov	r0, r5
 80006e4:	f000 f9e8 	bl	8000ab8 <_sbrk_r>
 80006e8:	3001      	adds	r0, #1
 80006ea:	d101      	bne.n	80006f0 <sbrk_aligned+0x38>
 80006ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80006f0:	4620      	mov	r0, r4
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	20000080 	.word	0x20000080

080006f8 <_malloc_r>:
 80006f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006fc:	1ccd      	adds	r5, r1, #3
 80006fe:	f025 0503 	bic.w	r5, r5, #3
 8000702:	3508      	adds	r5, #8
 8000704:	2d0c      	cmp	r5, #12
 8000706:	bf38      	it	cc
 8000708:	250c      	movcc	r5, #12
 800070a:	2d00      	cmp	r5, #0
 800070c:	4607      	mov	r7, r0
 800070e:	db01      	blt.n	8000714 <_malloc_r+0x1c>
 8000710:	42a9      	cmp	r1, r5
 8000712:	d905      	bls.n	8000720 <_malloc_r+0x28>
 8000714:	230c      	movs	r3, #12
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	2600      	movs	r6, #0
 800071a:	4630      	mov	r0, r6
 800071c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000720:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80007f4 <_malloc_r+0xfc>
 8000724:	f000 f868 	bl	80007f8 <__malloc_lock>
 8000728:	f8d8 3000 	ldr.w	r3, [r8]
 800072c:	461c      	mov	r4, r3
 800072e:	bb5c      	cbnz	r4, 8000788 <_malloc_r+0x90>
 8000730:	4629      	mov	r1, r5
 8000732:	4638      	mov	r0, r7
 8000734:	f7ff ffc0 	bl	80006b8 <sbrk_aligned>
 8000738:	1c43      	adds	r3, r0, #1
 800073a:	4604      	mov	r4, r0
 800073c:	d155      	bne.n	80007ea <_malloc_r+0xf2>
 800073e:	f8d8 4000 	ldr.w	r4, [r8]
 8000742:	4626      	mov	r6, r4
 8000744:	2e00      	cmp	r6, #0
 8000746:	d145      	bne.n	80007d4 <_malloc_r+0xdc>
 8000748:	2c00      	cmp	r4, #0
 800074a:	d048      	beq.n	80007de <_malloc_r+0xe6>
 800074c:	6823      	ldr	r3, [r4, #0]
 800074e:	4631      	mov	r1, r6
 8000750:	4638      	mov	r0, r7
 8000752:	eb04 0903 	add.w	r9, r4, r3
 8000756:	f000 f9af 	bl	8000ab8 <_sbrk_r>
 800075a:	4581      	cmp	r9, r0
 800075c:	d13f      	bne.n	80007de <_malloc_r+0xe6>
 800075e:	6821      	ldr	r1, [r4, #0]
 8000760:	1a6d      	subs	r5, r5, r1
 8000762:	4629      	mov	r1, r5
 8000764:	4638      	mov	r0, r7
 8000766:	f7ff ffa7 	bl	80006b8 <sbrk_aligned>
 800076a:	3001      	adds	r0, #1
 800076c:	d037      	beq.n	80007de <_malloc_r+0xe6>
 800076e:	6823      	ldr	r3, [r4, #0]
 8000770:	442b      	add	r3, r5
 8000772:	6023      	str	r3, [r4, #0]
 8000774:	f8d8 3000 	ldr.w	r3, [r8]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d038      	beq.n	80007ee <_malloc_r+0xf6>
 800077c:	685a      	ldr	r2, [r3, #4]
 800077e:	42a2      	cmp	r2, r4
 8000780:	d12b      	bne.n	80007da <_malloc_r+0xe2>
 8000782:	2200      	movs	r2, #0
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	e00f      	b.n	80007a8 <_malloc_r+0xb0>
 8000788:	6822      	ldr	r2, [r4, #0]
 800078a:	1b52      	subs	r2, r2, r5
 800078c:	d41f      	bmi.n	80007ce <_malloc_r+0xd6>
 800078e:	2a0b      	cmp	r2, #11
 8000790:	d917      	bls.n	80007c2 <_malloc_r+0xca>
 8000792:	1961      	adds	r1, r4, r5
 8000794:	42a3      	cmp	r3, r4
 8000796:	6025      	str	r5, [r4, #0]
 8000798:	bf18      	it	ne
 800079a:	6059      	strne	r1, [r3, #4]
 800079c:	6863      	ldr	r3, [r4, #4]
 800079e:	bf08      	it	eq
 80007a0:	f8c8 1000 	streq.w	r1, [r8]
 80007a4:	5162      	str	r2, [r4, r5]
 80007a6:	604b      	str	r3, [r1, #4]
 80007a8:	4638      	mov	r0, r7
 80007aa:	f104 060b 	add.w	r6, r4, #11
 80007ae:	f000 f829 	bl	8000804 <__malloc_unlock>
 80007b2:	f026 0607 	bic.w	r6, r6, #7
 80007b6:	1d23      	adds	r3, r4, #4
 80007b8:	1af2      	subs	r2, r6, r3
 80007ba:	d0ae      	beq.n	800071a <_malloc_r+0x22>
 80007bc:	1b9b      	subs	r3, r3, r6
 80007be:	50a3      	str	r3, [r4, r2]
 80007c0:	e7ab      	b.n	800071a <_malloc_r+0x22>
 80007c2:	42a3      	cmp	r3, r4
 80007c4:	6862      	ldr	r2, [r4, #4]
 80007c6:	d1dd      	bne.n	8000784 <_malloc_r+0x8c>
 80007c8:	f8c8 2000 	str.w	r2, [r8]
 80007cc:	e7ec      	b.n	80007a8 <_malloc_r+0xb0>
 80007ce:	4623      	mov	r3, r4
 80007d0:	6864      	ldr	r4, [r4, #4]
 80007d2:	e7ac      	b.n	800072e <_malloc_r+0x36>
 80007d4:	4634      	mov	r4, r6
 80007d6:	6876      	ldr	r6, [r6, #4]
 80007d8:	e7b4      	b.n	8000744 <_malloc_r+0x4c>
 80007da:	4613      	mov	r3, r2
 80007dc:	e7cc      	b.n	8000778 <_malloc_r+0x80>
 80007de:	230c      	movs	r3, #12
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4638      	mov	r0, r7
 80007e4:	f000 f80e 	bl	8000804 <__malloc_unlock>
 80007e8:	e797      	b.n	800071a <_malloc_r+0x22>
 80007ea:	6025      	str	r5, [r4, #0]
 80007ec:	e7dc      	b.n	80007a8 <_malloc_r+0xb0>
 80007ee:	605b      	str	r3, [r3, #4]
 80007f0:	deff      	udf	#255	; 0xff
 80007f2:	bf00      	nop
 80007f4:	2000007c 	.word	0x2000007c

080007f8 <__malloc_lock>:
 80007f8:	4801      	ldr	r0, [pc, #4]	; (8000800 <__malloc_lock+0x8>)
 80007fa:	f000 b9aa 	b.w	8000b52 <__retarget_lock_acquire_recursive>
 80007fe:	bf00      	nop
 8000800:	200001c4 	.word	0x200001c4

08000804 <__malloc_unlock>:
 8000804:	4801      	ldr	r0, [pc, #4]	; (800080c <__malloc_unlock+0x8>)
 8000806:	f000 b9a5 	b.w	8000b54 <__retarget_lock_release_recursive>
 800080a:	bf00      	nop
 800080c:	200001c4 	.word	0x200001c4

08000810 <std>:
 8000810:	2300      	movs	r3, #0
 8000812:	b510      	push	{r4, lr}
 8000814:	4604      	mov	r4, r0
 8000816:	e9c0 3300 	strd	r3, r3, [r0]
 800081a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800081e:	6083      	str	r3, [r0, #8]
 8000820:	8181      	strh	r1, [r0, #12]
 8000822:	6643      	str	r3, [r0, #100]	; 0x64
 8000824:	81c2      	strh	r2, [r0, #14]
 8000826:	6183      	str	r3, [r0, #24]
 8000828:	4619      	mov	r1, r3
 800082a:	2208      	movs	r2, #8
 800082c:	305c      	adds	r0, #92	; 0x5c
 800082e:	f000 f906 	bl	8000a3e <memset>
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <std+0x58>)
 8000834:	6263      	str	r3, [r4, #36]	; 0x24
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <std+0x5c>)
 8000838:	62a3      	str	r3, [r4, #40]	; 0x28
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <std+0x60>)
 800083c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <std+0x64>)
 8000840:	6323      	str	r3, [r4, #48]	; 0x30
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <std+0x68>)
 8000844:	6224      	str	r4, [r4, #32]
 8000846:	429c      	cmp	r4, r3
 8000848:	d006      	beq.n	8000858 <std+0x48>
 800084a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800084e:	4294      	cmp	r4, r2
 8000850:	d002      	beq.n	8000858 <std+0x48>
 8000852:	33d0      	adds	r3, #208	; 0xd0
 8000854:	429c      	cmp	r4, r3
 8000856:	d105      	bne.n	8000864 <std+0x54>
 8000858:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800085c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000860:	f000 b976 	b.w	8000b50 <__retarget_lock_init_recursive>
 8000864:	bd10      	pop	{r4, pc}
 8000866:	bf00      	nop
 8000868:	080009b9 	.word	0x080009b9
 800086c:	080009db 	.word	0x080009db
 8000870:	08000a13 	.word	0x08000a13
 8000874:	08000a37 	.word	0x08000a37
 8000878:	20000084 	.word	0x20000084

0800087c <stdio_exit_handler>:
 800087c:	4a02      	ldr	r2, [pc, #8]	; (8000888 <stdio_exit_handler+0xc>)
 800087e:	4903      	ldr	r1, [pc, #12]	; (800088c <stdio_exit_handler+0x10>)
 8000880:	4803      	ldr	r0, [pc, #12]	; (8000890 <stdio_exit_handler+0x14>)
 8000882:	f000 b869 	b.w	8000958 <_fwalk_sglue>
 8000886:	bf00      	nop
 8000888:	20000000 	.word	0x20000000
 800088c:	080012a5 	.word	0x080012a5
 8000890:	2000000c 	.word	0x2000000c

08000894 <cleanup_stdio>:
 8000894:	6841      	ldr	r1, [r0, #4]
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <cleanup_stdio+0x34>)
 8000898:	4299      	cmp	r1, r3
 800089a:	b510      	push	{r4, lr}
 800089c:	4604      	mov	r4, r0
 800089e:	d001      	beq.n	80008a4 <cleanup_stdio+0x10>
 80008a0:	f000 fd00 	bl	80012a4 <_fflush_r>
 80008a4:	68a1      	ldr	r1, [r4, #8]
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <cleanup_stdio+0x38>)
 80008a8:	4299      	cmp	r1, r3
 80008aa:	d002      	beq.n	80008b2 <cleanup_stdio+0x1e>
 80008ac:	4620      	mov	r0, r4
 80008ae:	f000 fcf9 	bl	80012a4 <_fflush_r>
 80008b2:	68e1      	ldr	r1, [r4, #12]
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <cleanup_stdio+0x3c>)
 80008b6:	4299      	cmp	r1, r3
 80008b8:	d004      	beq.n	80008c4 <cleanup_stdio+0x30>
 80008ba:	4620      	mov	r0, r4
 80008bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008c0:	f000 bcf0 	b.w	80012a4 <_fflush_r>
 80008c4:	bd10      	pop	{r4, pc}
 80008c6:	bf00      	nop
 80008c8:	20000084 	.word	0x20000084
 80008cc:	200000ec 	.word	0x200000ec
 80008d0:	20000154 	.word	0x20000154

080008d4 <global_stdio_init.part.0>:
 80008d4:	b510      	push	{r4, lr}
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <global_stdio_init.part.0+0x30>)
 80008d8:	4c0b      	ldr	r4, [pc, #44]	; (8000908 <global_stdio_init.part.0+0x34>)
 80008da:	4a0c      	ldr	r2, [pc, #48]	; (800090c <global_stdio_init.part.0+0x38>)
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	4620      	mov	r0, r4
 80008e0:	2200      	movs	r2, #0
 80008e2:	2104      	movs	r1, #4
 80008e4:	f7ff ff94 	bl	8000810 <std>
 80008e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80008ec:	2201      	movs	r2, #1
 80008ee:	2109      	movs	r1, #9
 80008f0:	f7ff ff8e 	bl	8000810 <std>
 80008f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80008f8:	2202      	movs	r2, #2
 80008fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008fe:	2112      	movs	r1, #18
 8000900:	f7ff bf86 	b.w	8000810 <std>
 8000904:	200001bc 	.word	0x200001bc
 8000908:	20000084 	.word	0x20000084
 800090c:	0800087d 	.word	0x0800087d

08000910 <__sfp_lock_acquire>:
 8000910:	4801      	ldr	r0, [pc, #4]	; (8000918 <__sfp_lock_acquire+0x8>)
 8000912:	f000 b91e 	b.w	8000b52 <__retarget_lock_acquire_recursive>
 8000916:	bf00      	nop
 8000918:	200001c5 	.word	0x200001c5

0800091c <__sfp_lock_release>:
 800091c:	4801      	ldr	r0, [pc, #4]	; (8000924 <__sfp_lock_release+0x8>)
 800091e:	f000 b919 	b.w	8000b54 <__retarget_lock_release_recursive>
 8000922:	bf00      	nop
 8000924:	200001c5 	.word	0x200001c5

08000928 <__sinit>:
 8000928:	b510      	push	{r4, lr}
 800092a:	4604      	mov	r4, r0
 800092c:	f7ff fff0 	bl	8000910 <__sfp_lock_acquire>
 8000930:	6a23      	ldr	r3, [r4, #32]
 8000932:	b11b      	cbz	r3, 800093c <__sinit+0x14>
 8000934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000938:	f7ff bff0 	b.w	800091c <__sfp_lock_release>
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <__sinit+0x28>)
 800093e:	6223      	str	r3, [r4, #32]
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__sinit+0x2c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f5      	bne.n	8000934 <__sinit+0xc>
 8000948:	f7ff ffc4 	bl	80008d4 <global_stdio_init.part.0>
 800094c:	e7f2      	b.n	8000934 <__sinit+0xc>
 800094e:	bf00      	nop
 8000950:	08000895 	.word	0x08000895
 8000954:	200001bc 	.word	0x200001bc

08000958 <_fwalk_sglue>:
 8000958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800095c:	4607      	mov	r7, r0
 800095e:	4688      	mov	r8, r1
 8000960:	4614      	mov	r4, r2
 8000962:	2600      	movs	r6, #0
 8000964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000968:	f1b9 0901 	subs.w	r9, r9, #1
 800096c:	d505      	bpl.n	800097a <_fwalk_sglue+0x22>
 800096e:	6824      	ldr	r4, [r4, #0]
 8000970:	2c00      	cmp	r4, #0
 8000972:	d1f7      	bne.n	8000964 <_fwalk_sglue+0xc>
 8000974:	4630      	mov	r0, r6
 8000976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800097a:	89ab      	ldrh	r3, [r5, #12]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d907      	bls.n	8000990 <_fwalk_sglue+0x38>
 8000980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000984:	3301      	adds	r3, #1
 8000986:	d003      	beq.n	8000990 <_fwalk_sglue+0x38>
 8000988:	4629      	mov	r1, r5
 800098a:	4638      	mov	r0, r7
 800098c:	47c0      	blx	r8
 800098e:	4306      	orrs	r6, r0
 8000990:	3568      	adds	r5, #104	; 0x68
 8000992:	e7e9      	b.n	8000968 <_fwalk_sglue+0x10>

08000994 <iprintf>:
 8000994:	b40f      	push	{r0, r1, r2, r3}
 8000996:	b507      	push	{r0, r1, r2, lr}
 8000998:	4906      	ldr	r1, [pc, #24]	; (80009b4 <iprintf+0x20>)
 800099a:	ab04      	add	r3, sp, #16
 800099c:	6808      	ldr	r0, [r1, #0]
 800099e:	f853 2b04 	ldr.w	r2, [r3], #4
 80009a2:	6881      	ldr	r1, [r0, #8]
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	f000 f94d 	bl	8000c44 <_vfiprintf_r>
 80009aa:	b003      	add	sp, #12
 80009ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80009b0:	b004      	add	sp, #16
 80009b2:	4770      	bx	lr
 80009b4:	20000058 	.word	0x20000058

080009b8 <__sread>:
 80009b8:	b510      	push	{r4, lr}
 80009ba:	460c      	mov	r4, r1
 80009bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009c0:	f000 f868 	bl	8000a94 <_read_r>
 80009c4:	2800      	cmp	r0, #0
 80009c6:	bfab      	itete	ge
 80009c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80009ca:	89a3      	ldrhlt	r3, [r4, #12]
 80009cc:	181b      	addge	r3, r3, r0
 80009ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80009d2:	bfac      	ite	ge
 80009d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80009d6:	81a3      	strhlt	r3, [r4, #12]
 80009d8:	bd10      	pop	{r4, pc}

080009da <__swrite>:
 80009da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009de:	461f      	mov	r7, r3
 80009e0:	898b      	ldrh	r3, [r1, #12]
 80009e2:	05db      	lsls	r3, r3, #23
 80009e4:	4605      	mov	r5, r0
 80009e6:	460c      	mov	r4, r1
 80009e8:	4616      	mov	r6, r2
 80009ea:	d505      	bpl.n	80009f8 <__swrite+0x1e>
 80009ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009f0:	2302      	movs	r3, #2
 80009f2:	2200      	movs	r2, #0
 80009f4:	f000 f83c 	bl	8000a70 <_lseek_r>
 80009f8:	89a3      	ldrh	r3, [r4, #12]
 80009fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80009fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a02:	81a3      	strh	r3, [r4, #12]
 8000a04:	4632      	mov	r2, r6
 8000a06:	463b      	mov	r3, r7
 8000a08:	4628      	mov	r0, r5
 8000a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a0e:	f000 b863 	b.w	8000ad8 <_write_r>

08000a12 <__sseek>:
 8000a12:	b510      	push	{r4, lr}
 8000a14:	460c      	mov	r4, r1
 8000a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a1a:	f000 f829 	bl	8000a70 <_lseek_r>
 8000a1e:	1c43      	adds	r3, r0, #1
 8000a20:	89a3      	ldrh	r3, [r4, #12]
 8000a22:	bf15      	itete	ne
 8000a24:	6560      	strne	r0, [r4, #84]	; 0x54
 8000a26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000a2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000a2e:	81a3      	strheq	r3, [r4, #12]
 8000a30:	bf18      	it	ne
 8000a32:	81a3      	strhne	r3, [r4, #12]
 8000a34:	bd10      	pop	{r4, pc}

08000a36 <__sclose>:
 8000a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a3a:	f000 b809 	b.w	8000a50 <_close_r>

08000a3e <memset>:
 8000a3e:	4402      	add	r2, r0
 8000a40:	4603      	mov	r3, r0
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d100      	bne.n	8000a48 <memset+0xa>
 8000a46:	4770      	bx	lr
 8000a48:	f803 1b01 	strb.w	r1, [r3], #1
 8000a4c:	e7f9      	b.n	8000a42 <memset+0x4>
	...

08000a50 <_close_r>:
 8000a50:	b538      	push	{r3, r4, r5, lr}
 8000a52:	4d06      	ldr	r5, [pc, #24]	; (8000a6c <_close_r+0x1c>)
 8000a54:	2300      	movs	r3, #0
 8000a56:	4604      	mov	r4, r0
 8000a58:	4608      	mov	r0, r1
 8000a5a:	602b      	str	r3, [r5, #0]
 8000a5c:	f7ff fd79 	bl	8000552 <_close>
 8000a60:	1c43      	adds	r3, r0, #1
 8000a62:	d102      	bne.n	8000a6a <_close_r+0x1a>
 8000a64:	682b      	ldr	r3, [r5, #0]
 8000a66:	b103      	cbz	r3, 8000a6a <_close_r+0x1a>
 8000a68:	6023      	str	r3, [r4, #0]
 8000a6a:	bd38      	pop	{r3, r4, r5, pc}
 8000a6c:	200001c0 	.word	0x200001c0

08000a70 <_lseek_r>:
 8000a70:	b538      	push	{r3, r4, r5, lr}
 8000a72:	4d07      	ldr	r5, [pc, #28]	; (8000a90 <_lseek_r+0x20>)
 8000a74:	4604      	mov	r4, r0
 8000a76:	4608      	mov	r0, r1
 8000a78:	4611      	mov	r1, r2
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	602a      	str	r2, [r5, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	f7ff fd8e 	bl	80005a0 <_lseek>
 8000a84:	1c43      	adds	r3, r0, #1
 8000a86:	d102      	bne.n	8000a8e <_lseek_r+0x1e>
 8000a88:	682b      	ldr	r3, [r5, #0]
 8000a8a:	b103      	cbz	r3, 8000a8e <_lseek_r+0x1e>
 8000a8c:	6023      	str	r3, [r4, #0]
 8000a8e:	bd38      	pop	{r3, r4, r5, pc}
 8000a90:	200001c0 	.word	0x200001c0

08000a94 <_read_r>:
 8000a94:	b538      	push	{r3, r4, r5, lr}
 8000a96:	4d07      	ldr	r5, [pc, #28]	; (8000ab4 <_read_r+0x20>)
 8000a98:	4604      	mov	r4, r0
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	602a      	str	r2, [r5, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	f7ff fd1c 	bl	80004e0 <_read>
 8000aa8:	1c43      	adds	r3, r0, #1
 8000aaa:	d102      	bne.n	8000ab2 <_read_r+0x1e>
 8000aac:	682b      	ldr	r3, [r5, #0]
 8000aae:	b103      	cbz	r3, 8000ab2 <_read_r+0x1e>
 8000ab0:	6023      	str	r3, [r4, #0]
 8000ab2:	bd38      	pop	{r3, r4, r5, pc}
 8000ab4:	200001c0 	.word	0x200001c0

08000ab8 <_sbrk_r>:
 8000ab8:	b538      	push	{r3, r4, r5, lr}
 8000aba:	4d06      	ldr	r5, [pc, #24]	; (8000ad4 <_sbrk_r+0x1c>)
 8000abc:	2300      	movs	r3, #0
 8000abe:	4604      	mov	r4, r0
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	602b      	str	r3, [r5, #0]
 8000ac4:	f7ff fd7a 	bl	80005bc <_sbrk>
 8000ac8:	1c43      	adds	r3, r0, #1
 8000aca:	d102      	bne.n	8000ad2 <_sbrk_r+0x1a>
 8000acc:	682b      	ldr	r3, [r5, #0]
 8000ace:	b103      	cbz	r3, 8000ad2 <_sbrk_r+0x1a>
 8000ad0:	6023      	str	r3, [r4, #0]
 8000ad2:	bd38      	pop	{r3, r4, r5, pc}
 8000ad4:	200001c0 	.word	0x200001c0

08000ad8 <_write_r>:
 8000ad8:	b538      	push	{r3, r4, r5, lr}
 8000ada:	4d07      	ldr	r5, [pc, #28]	; (8000af8 <_write_r+0x20>)
 8000adc:	4604      	mov	r4, r0
 8000ade:	4608      	mov	r0, r1
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	602a      	str	r2, [r5, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	f7ff fd17 	bl	800051a <_write>
 8000aec:	1c43      	adds	r3, r0, #1
 8000aee:	d102      	bne.n	8000af6 <_write_r+0x1e>
 8000af0:	682b      	ldr	r3, [r5, #0]
 8000af2:	b103      	cbz	r3, 8000af6 <_write_r+0x1e>
 8000af4:	6023      	str	r3, [r4, #0]
 8000af6:	bd38      	pop	{r3, r4, r5, pc}
 8000af8:	200001c0 	.word	0x200001c0

08000afc <__errno>:
 8000afc:	4b01      	ldr	r3, [pc, #4]	; (8000b04 <__errno+0x8>)
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000058 	.word	0x20000058

08000b08 <__libc_init_array>:
 8000b08:	b570      	push	{r4, r5, r6, lr}
 8000b0a:	4d0d      	ldr	r5, [pc, #52]	; (8000b40 <__libc_init_array+0x38>)
 8000b0c:	4c0d      	ldr	r4, [pc, #52]	; (8000b44 <__libc_init_array+0x3c>)
 8000b0e:	1b64      	subs	r4, r4, r5
 8000b10:	10a4      	asrs	r4, r4, #2
 8000b12:	2600      	movs	r6, #0
 8000b14:	42a6      	cmp	r6, r4
 8000b16:	d109      	bne.n	8000b2c <__libc_init_array+0x24>
 8000b18:	4d0b      	ldr	r5, [pc, #44]	; (8000b48 <__libc_init_array+0x40>)
 8000b1a:	4c0c      	ldr	r4, [pc, #48]	; (8000b4c <__libc_init_array+0x44>)
 8000b1c:	f000 fd04 	bl	8001528 <_init>
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	10a4      	asrs	r4, r4, #2
 8000b24:	2600      	movs	r6, #0
 8000b26:	42a6      	cmp	r6, r4
 8000b28:	d105      	bne.n	8000b36 <__libc_init_array+0x2e>
 8000b2a:	bd70      	pop	{r4, r5, r6, pc}
 8000b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b30:	4798      	blx	r3
 8000b32:	3601      	adds	r6, #1
 8000b34:	e7ee      	b.n	8000b14 <__libc_init_array+0xc>
 8000b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b3a:	4798      	blx	r3
 8000b3c:	3601      	adds	r6, #1
 8000b3e:	e7f2      	b.n	8000b26 <__libc_init_array+0x1e>
 8000b40:	08001588 	.word	0x08001588
 8000b44:	08001588 	.word	0x08001588
 8000b48:	08001588 	.word	0x08001588
 8000b4c:	0800158c 	.word	0x0800158c

08000b50 <__retarget_lock_init_recursive>:
 8000b50:	4770      	bx	lr

08000b52 <__retarget_lock_acquire_recursive>:
 8000b52:	4770      	bx	lr

08000b54 <__retarget_lock_release_recursive>:
 8000b54:	4770      	bx	lr
	...

08000b58 <_free_r>:
 8000b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d044      	beq.n	8000be8 <_free_r+0x90>
 8000b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b62:	9001      	str	r0, [sp, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f1a1 0404 	sub.w	r4, r1, #4
 8000b6a:	bfb8      	it	lt
 8000b6c:	18e4      	addlt	r4, r4, r3
 8000b6e:	f7ff fe43 	bl	80007f8 <__malloc_lock>
 8000b72:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <_free_r+0x94>)
 8000b74:	9801      	ldr	r0, [sp, #4]
 8000b76:	6813      	ldr	r3, [r2, #0]
 8000b78:	b933      	cbnz	r3, 8000b88 <_free_r+0x30>
 8000b7a:	6063      	str	r3, [r4, #4]
 8000b7c:	6014      	str	r4, [r2, #0]
 8000b7e:	b003      	add	sp, #12
 8000b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000b84:	f7ff be3e 	b.w	8000804 <__malloc_unlock>
 8000b88:	42a3      	cmp	r3, r4
 8000b8a:	d908      	bls.n	8000b9e <_free_r+0x46>
 8000b8c:	6825      	ldr	r5, [r4, #0]
 8000b8e:	1961      	adds	r1, r4, r5
 8000b90:	428b      	cmp	r3, r1
 8000b92:	bf01      	itttt	eq
 8000b94:	6819      	ldreq	r1, [r3, #0]
 8000b96:	685b      	ldreq	r3, [r3, #4]
 8000b98:	1949      	addeq	r1, r1, r5
 8000b9a:	6021      	streq	r1, [r4, #0]
 8000b9c:	e7ed      	b.n	8000b7a <_free_r+0x22>
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	b10b      	cbz	r3, 8000ba8 <_free_r+0x50>
 8000ba4:	42a3      	cmp	r3, r4
 8000ba6:	d9fa      	bls.n	8000b9e <_free_r+0x46>
 8000ba8:	6811      	ldr	r1, [r2, #0]
 8000baa:	1855      	adds	r5, r2, r1
 8000bac:	42a5      	cmp	r5, r4
 8000bae:	d10b      	bne.n	8000bc8 <_free_r+0x70>
 8000bb0:	6824      	ldr	r4, [r4, #0]
 8000bb2:	4421      	add	r1, r4
 8000bb4:	1854      	adds	r4, r2, r1
 8000bb6:	42a3      	cmp	r3, r4
 8000bb8:	6011      	str	r1, [r2, #0]
 8000bba:	d1e0      	bne.n	8000b7e <_free_r+0x26>
 8000bbc:	681c      	ldr	r4, [r3, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	6053      	str	r3, [r2, #4]
 8000bc2:	440c      	add	r4, r1
 8000bc4:	6014      	str	r4, [r2, #0]
 8000bc6:	e7da      	b.n	8000b7e <_free_r+0x26>
 8000bc8:	d902      	bls.n	8000bd0 <_free_r+0x78>
 8000bca:	230c      	movs	r3, #12
 8000bcc:	6003      	str	r3, [r0, #0]
 8000bce:	e7d6      	b.n	8000b7e <_free_r+0x26>
 8000bd0:	6825      	ldr	r5, [r4, #0]
 8000bd2:	1961      	adds	r1, r4, r5
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	bf04      	itt	eq
 8000bd8:	6819      	ldreq	r1, [r3, #0]
 8000bda:	685b      	ldreq	r3, [r3, #4]
 8000bdc:	6063      	str	r3, [r4, #4]
 8000bde:	bf04      	itt	eq
 8000be0:	1949      	addeq	r1, r1, r5
 8000be2:	6021      	streq	r1, [r4, #0]
 8000be4:	6054      	str	r4, [r2, #4]
 8000be6:	e7ca      	b.n	8000b7e <_free_r+0x26>
 8000be8:	b003      	add	sp, #12
 8000bea:	bd30      	pop	{r4, r5, pc}
 8000bec:	2000007c 	.word	0x2000007c

08000bf0 <__sfputc_r>:
 8000bf0:	6893      	ldr	r3, [r2, #8]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	b410      	push	{r4}
 8000bf8:	6093      	str	r3, [r2, #8]
 8000bfa:	da08      	bge.n	8000c0e <__sfputc_r+0x1e>
 8000bfc:	6994      	ldr	r4, [r2, #24]
 8000bfe:	42a3      	cmp	r3, r4
 8000c00:	db01      	blt.n	8000c06 <__sfputc_r+0x16>
 8000c02:	290a      	cmp	r1, #10
 8000c04:	d103      	bne.n	8000c0e <__sfputc_r+0x1e>
 8000c06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c0a:	f000 bb73 	b.w	80012f4 <__swbuf_r>
 8000c0e:	6813      	ldr	r3, [r2, #0]
 8000c10:	1c58      	adds	r0, r3, #1
 8000c12:	6010      	str	r0, [r2, #0]
 8000c14:	7019      	strb	r1, [r3, #0]
 8000c16:	4608      	mov	r0, r1
 8000c18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <__sfputs_r>:
 8000c1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c20:	4606      	mov	r6, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	4614      	mov	r4, r2
 8000c26:	18d5      	adds	r5, r2, r3
 8000c28:	42ac      	cmp	r4, r5
 8000c2a:	d101      	bne.n	8000c30 <__sfputs_r+0x12>
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	e007      	b.n	8000c40 <__sfputs_r+0x22>
 8000c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c34:	463a      	mov	r2, r7
 8000c36:	4630      	mov	r0, r6
 8000c38:	f7ff ffda 	bl	8000bf0 <__sfputc_r>
 8000c3c:	1c43      	adds	r3, r0, #1
 8000c3e:	d1f3      	bne.n	8000c28 <__sfputs_r+0xa>
 8000c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c44 <_vfiprintf_r>:
 8000c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c48:	460d      	mov	r5, r1
 8000c4a:	b09d      	sub	sp, #116	; 0x74
 8000c4c:	4614      	mov	r4, r2
 8000c4e:	4698      	mov	r8, r3
 8000c50:	4606      	mov	r6, r0
 8000c52:	b118      	cbz	r0, 8000c5c <_vfiprintf_r+0x18>
 8000c54:	6a03      	ldr	r3, [r0, #32]
 8000c56:	b90b      	cbnz	r3, 8000c5c <_vfiprintf_r+0x18>
 8000c58:	f7ff fe66 	bl	8000928 <__sinit>
 8000c5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c5e:	07d9      	lsls	r1, r3, #31
 8000c60:	d405      	bmi.n	8000c6e <_vfiprintf_r+0x2a>
 8000c62:	89ab      	ldrh	r3, [r5, #12]
 8000c64:	059a      	lsls	r2, r3, #22
 8000c66:	d402      	bmi.n	8000c6e <_vfiprintf_r+0x2a>
 8000c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c6a:	f7ff ff72 	bl	8000b52 <__retarget_lock_acquire_recursive>
 8000c6e:	89ab      	ldrh	r3, [r5, #12]
 8000c70:	071b      	lsls	r3, r3, #28
 8000c72:	d501      	bpl.n	8000c78 <_vfiprintf_r+0x34>
 8000c74:	692b      	ldr	r3, [r5, #16]
 8000c76:	b99b      	cbnz	r3, 8000ca0 <_vfiprintf_r+0x5c>
 8000c78:	4629      	mov	r1, r5
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	f000 fb78 	bl	8001370 <__swsetup_r>
 8000c80:	b170      	cbz	r0, 8000ca0 <_vfiprintf_r+0x5c>
 8000c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c84:	07dc      	lsls	r4, r3, #31
 8000c86:	d504      	bpl.n	8000c92 <_vfiprintf_r+0x4e>
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c8c:	b01d      	add	sp, #116	; 0x74
 8000c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c92:	89ab      	ldrh	r3, [r5, #12]
 8000c94:	0598      	lsls	r0, r3, #22
 8000c96:	d4f7      	bmi.n	8000c88 <_vfiprintf_r+0x44>
 8000c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c9a:	f7ff ff5b 	bl	8000b54 <__retarget_lock_release_recursive>
 8000c9e:	e7f3      	b.n	8000c88 <_vfiprintf_r+0x44>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8000ca4:	2320      	movs	r3, #32
 8000ca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000caa:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cae:	2330      	movs	r3, #48	; 0x30
 8000cb0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000e64 <_vfiprintf_r+0x220>
 8000cb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000cb8:	f04f 0901 	mov.w	r9, #1
 8000cbc:	4623      	mov	r3, r4
 8000cbe:	469a      	mov	sl, r3
 8000cc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cc4:	b10a      	cbz	r2, 8000cca <_vfiprintf_r+0x86>
 8000cc6:	2a25      	cmp	r2, #37	; 0x25
 8000cc8:	d1f9      	bne.n	8000cbe <_vfiprintf_r+0x7a>
 8000cca:	ebba 0b04 	subs.w	fp, sl, r4
 8000cce:	d00b      	beq.n	8000ce8 <_vfiprintf_r+0xa4>
 8000cd0:	465b      	mov	r3, fp
 8000cd2:	4622      	mov	r2, r4
 8000cd4:	4629      	mov	r1, r5
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	f7ff ffa1 	bl	8000c1e <__sfputs_r>
 8000cdc:	3001      	adds	r0, #1
 8000cde:	f000 80a9 	beq.w	8000e34 <_vfiprintf_r+0x1f0>
 8000ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ce4:	445a      	add	r2, fp
 8000ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8000ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 80a1 	beq.w	8000e34 <_vfiprintf_r+0x1f0>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cfc:	f10a 0a01 	add.w	sl, sl, #1
 8000d00:	9304      	str	r3, [sp, #16]
 8000d02:	9307      	str	r3, [sp, #28]
 8000d04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000d08:	931a      	str	r3, [sp, #104]	; 0x68
 8000d0a:	4654      	mov	r4, sl
 8000d0c:	2205      	movs	r2, #5
 8000d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d12:	4854      	ldr	r0, [pc, #336]	; (8000e64 <_vfiprintf_r+0x220>)
 8000d14:	f7ff fa5c 	bl	80001d0 <memchr>
 8000d18:	9a04      	ldr	r2, [sp, #16]
 8000d1a:	b9d8      	cbnz	r0, 8000d54 <_vfiprintf_r+0x110>
 8000d1c:	06d1      	lsls	r1, r2, #27
 8000d1e:	bf44      	itt	mi
 8000d20:	2320      	movmi	r3, #32
 8000d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d26:	0713      	lsls	r3, r2, #28
 8000d28:	bf44      	itt	mi
 8000d2a:	232b      	movmi	r3, #43	; 0x2b
 8000d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d30:	f89a 3000 	ldrb.w	r3, [sl]
 8000d34:	2b2a      	cmp	r3, #42	; 0x2a
 8000d36:	d015      	beq.n	8000d64 <_vfiprintf_r+0x120>
 8000d38:	9a07      	ldr	r2, [sp, #28]
 8000d3a:	4654      	mov	r4, sl
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f04f 0c0a 	mov.w	ip, #10
 8000d42:	4621      	mov	r1, r4
 8000d44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d48:	3b30      	subs	r3, #48	; 0x30
 8000d4a:	2b09      	cmp	r3, #9
 8000d4c:	d94d      	bls.n	8000dea <_vfiprintf_r+0x1a6>
 8000d4e:	b1b0      	cbz	r0, 8000d7e <_vfiprintf_r+0x13a>
 8000d50:	9207      	str	r2, [sp, #28]
 8000d52:	e014      	b.n	8000d7e <_vfiprintf_r+0x13a>
 8000d54:	eba0 0308 	sub.w	r3, r0, r8
 8000d58:	fa09 f303 	lsl.w	r3, r9, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	9304      	str	r3, [sp, #16]
 8000d60:	46a2      	mov	sl, r4
 8000d62:	e7d2      	b.n	8000d0a <_vfiprintf_r+0xc6>
 8000d64:	9b03      	ldr	r3, [sp, #12]
 8000d66:	1d19      	adds	r1, r3, #4
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	9103      	str	r1, [sp, #12]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	bfbb      	ittet	lt
 8000d70:	425b      	neglt	r3, r3
 8000d72:	f042 0202 	orrlt.w	r2, r2, #2
 8000d76:	9307      	strge	r3, [sp, #28]
 8000d78:	9307      	strlt	r3, [sp, #28]
 8000d7a:	bfb8      	it	lt
 8000d7c:	9204      	strlt	r2, [sp, #16]
 8000d7e:	7823      	ldrb	r3, [r4, #0]
 8000d80:	2b2e      	cmp	r3, #46	; 0x2e
 8000d82:	d10c      	bne.n	8000d9e <_vfiprintf_r+0x15a>
 8000d84:	7863      	ldrb	r3, [r4, #1]
 8000d86:	2b2a      	cmp	r3, #42	; 0x2a
 8000d88:	d134      	bne.n	8000df4 <_vfiprintf_r+0x1b0>
 8000d8a:	9b03      	ldr	r3, [sp, #12]
 8000d8c:	1d1a      	adds	r2, r3, #4
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	9203      	str	r2, [sp, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	bfb8      	it	lt
 8000d96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000d9a:	3402      	adds	r4, #2
 8000d9c:	9305      	str	r3, [sp, #20]
 8000d9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000e74 <_vfiprintf_r+0x230>
 8000da2:	7821      	ldrb	r1, [r4, #0]
 8000da4:	2203      	movs	r2, #3
 8000da6:	4650      	mov	r0, sl
 8000da8:	f7ff fa12 	bl	80001d0 <memchr>
 8000dac:	b138      	cbz	r0, 8000dbe <_vfiprintf_r+0x17a>
 8000dae:	9b04      	ldr	r3, [sp, #16]
 8000db0:	eba0 000a 	sub.w	r0, r0, sl
 8000db4:	2240      	movs	r2, #64	; 0x40
 8000db6:	4082      	lsls	r2, r0
 8000db8:	4313      	orrs	r3, r2
 8000dba:	3401      	adds	r4, #1
 8000dbc:	9304      	str	r3, [sp, #16]
 8000dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dc2:	4829      	ldr	r0, [pc, #164]	; (8000e68 <_vfiprintf_r+0x224>)
 8000dc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000dc8:	2206      	movs	r2, #6
 8000dca:	f7ff fa01 	bl	80001d0 <memchr>
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	d03f      	beq.n	8000e52 <_vfiprintf_r+0x20e>
 8000dd2:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <_vfiprintf_r+0x228>)
 8000dd4:	bb1b      	cbnz	r3, 8000e1e <_vfiprintf_r+0x1da>
 8000dd6:	9b03      	ldr	r3, [sp, #12]
 8000dd8:	3307      	adds	r3, #7
 8000dda:	f023 0307 	bic.w	r3, r3, #7
 8000dde:	3308      	adds	r3, #8
 8000de0:	9303      	str	r3, [sp, #12]
 8000de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000de4:	443b      	add	r3, r7
 8000de6:	9309      	str	r3, [sp, #36]	; 0x24
 8000de8:	e768      	b.n	8000cbc <_vfiprintf_r+0x78>
 8000dea:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dee:	460c      	mov	r4, r1
 8000df0:	2001      	movs	r0, #1
 8000df2:	e7a6      	b.n	8000d42 <_vfiprintf_r+0xfe>
 8000df4:	2300      	movs	r3, #0
 8000df6:	3401      	adds	r4, #1
 8000df8:	9305      	str	r3, [sp, #20]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f04f 0c0a 	mov.w	ip, #10
 8000e00:	4620      	mov	r0, r4
 8000e02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e06:	3a30      	subs	r2, #48	; 0x30
 8000e08:	2a09      	cmp	r2, #9
 8000e0a:	d903      	bls.n	8000e14 <_vfiprintf_r+0x1d0>
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0c6      	beq.n	8000d9e <_vfiprintf_r+0x15a>
 8000e10:	9105      	str	r1, [sp, #20]
 8000e12:	e7c4      	b.n	8000d9e <_vfiprintf_r+0x15a>
 8000e14:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e18:	4604      	mov	r4, r0
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e7f0      	b.n	8000e00 <_vfiprintf_r+0x1bc>
 8000e1e:	ab03      	add	r3, sp, #12
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	462a      	mov	r2, r5
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <_vfiprintf_r+0x22c>)
 8000e26:	a904      	add	r1, sp, #16
 8000e28:	4630      	mov	r0, r6
 8000e2a:	f3af 8000 	nop.w
 8000e2e:	4607      	mov	r7, r0
 8000e30:	1c78      	adds	r0, r7, #1
 8000e32:	d1d6      	bne.n	8000de2 <_vfiprintf_r+0x19e>
 8000e34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e36:	07d9      	lsls	r1, r3, #31
 8000e38:	d405      	bmi.n	8000e46 <_vfiprintf_r+0x202>
 8000e3a:	89ab      	ldrh	r3, [r5, #12]
 8000e3c:	059a      	lsls	r2, r3, #22
 8000e3e:	d402      	bmi.n	8000e46 <_vfiprintf_r+0x202>
 8000e40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e42:	f7ff fe87 	bl	8000b54 <__retarget_lock_release_recursive>
 8000e46:	89ab      	ldrh	r3, [r5, #12]
 8000e48:	065b      	lsls	r3, r3, #25
 8000e4a:	f53f af1d 	bmi.w	8000c88 <_vfiprintf_r+0x44>
 8000e4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e50:	e71c      	b.n	8000c8c <_vfiprintf_r+0x48>
 8000e52:	ab03      	add	r3, sp, #12
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	462a      	mov	r2, r5
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <_vfiprintf_r+0x22c>)
 8000e5a:	a904      	add	r1, sp, #16
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	f000 f879 	bl	8000f54 <_printf_i>
 8000e62:	e7e4      	b.n	8000e2e <_vfiprintf_r+0x1ea>
 8000e64:	08001553 	.word	0x08001553
 8000e68:	0800155d 	.word	0x0800155d
 8000e6c:	00000000 	.word	0x00000000
 8000e70:	08000c1f 	.word	0x08000c1f
 8000e74:	08001559 	.word	0x08001559

08000e78 <_printf_common>:
 8000e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e7c:	4616      	mov	r6, r2
 8000e7e:	4699      	mov	r9, r3
 8000e80:	688a      	ldr	r2, [r1, #8]
 8000e82:	690b      	ldr	r3, [r1, #16]
 8000e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	bfb8      	it	lt
 8000e8c:	4613      	movlt	r3, r2
 8000e8e:	6033      	str	r3, [r6, #0]
 8000e90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e94:	4607      	mov	r7, r0
 8000e96:	460c      	mov	r4, r1
 8000e98:	b10a      	cbz	r2, 8000e9e <_printf_common+0x26>
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	6033      	str	r3, [r6, #0]
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	0699      	lsls	r1, r3, #26
 8000ea2:	bf42      	ittt	mi
 8000ea4:	6833      	ldrmi	r3, [r6, #0]
 8000ea6:	3302      	addmi	r3, #2
 8000ea8:	6033      	strmi	r3, [r6, #0]
 8000eaa:	6825      	ldr	r5, [r4, #0]
 8000eac:	f015 0506 	ands.w	r5, r5, #6
 8000eb0:	d106      	bne.n	8000ec0 <_printf_common+0x48>
 8000eb2:	f104 0a19 	add.w	sl, r4, #25
 8000eb6:	68e3      	ldr	r3, [r4, #12]
 8000eb8:	6832      	ldr	r2, [r6, #0]
 8000eba:	1a9b      	subs	r3, r3, r2
 8000ebc:	42ab      	cmp	r3, r5
 8000ebe:	dc26      	bgt.n	8000f0e <_printf_common+0x96>
 8000ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000ec4:	1e13      	subs	r3, r2, #0
 8000ec6:	6822      	ldr	r2, [r4, #0]
 8000ec8:	bf18      	it	ne
 8000eca:	2301      	movne	r3, #1
 8000ecc:	0692      	lsls	r2, r2, #26
 8000ece:	d42b      	bmi.n	8000f28 <_printf_common+0xb0>
 8000ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ed4:	4649      	mov	r1, r9
 8000ed6:	4638      	mov	r0, r7
 8000ed8:	47c0      	blx	r8
 8000eda:	3001      	adds	r0, #1
 8000edc:	d01e      	beq.n	8000f1c <_printf_common+0xa4>
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	6922      	ldr	r2, [r4, #16]
 8000ee2:	f003 0306 	and.w	r3, r3, #6
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf02      	ittt	eq
 8000eea:	68e5      	ldreq	r5, [r4, #12]
 8000eec:	6833      	ldreq	r3, [r6, #0]
 8000eee:	1aed      	subeq	r5, r5, r3
 8000ef0:	68a3      	ldr	r3, [r4, #8]
 8000ef2:	bf0c      	ite	eq
 8000ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ef8:	2500      	movne	r5, #0
 8000efa:	4293      	cmp	r3, r2
 8000efc:	bfc4      	itt	gt
 8000efe:	1a9b      	subgt	r3, r3, r2
 8000f00:	18ed      	addgt	r5, r5, r3
 8000f02:	2600      	movs	r6, #0
 8000f04:	341a      	adds	r4, #26
 8000f06:	42b5      	cmp	r5, r6
 8000f08:	d11a      	bne.n	8000f40 <_printf_common+0xc8>
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	e008      	b.n	8000f20 <_printf_common+0xa8>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	4652      	mov	r2, sl
 8000f12:	4649      	mov	r1, r9
 8000f14:	4638      	mov	r0, r7
 8000f16:	47c0      	blx	r8
 8000f18:	3001      	adds	r0, #1
 8000f1a:	d103      	bne.n	8000f24 <_printf_common+0xac>
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f24:	3501      	adds	r5, #1
 8000f26:	e7c6      	b.n	8000eb6 <_printf_common+0x3e>
 8000f28:	18e1      	adds	r1, r4, r3
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	2030      	movs	r0, #48	; 0x30
 8000f2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000f32:	4422      	add	r2, r4
 8000f34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	e7c7      	b.n	8000ed0 <_printf_common+0x58>
 8000f40:	2301      	movs	r3, #1
 8000f42:	4622      	mov	r2, r4
 8000f44:	4649      	mov	r1, r9
 8000f46:	4638      	mov	r0, r7
 8000f48:	47c0      	blx	r8
 8000f4a:	3001      	adds	r0, #1
 8000f4c:	d0e6      	beq.n	8000f1c <_printf_common+0xa4>
 8000f4e:	3601      	adds	r6, #1
 8000f50:	e7d9      	b.n	8000f06 <_printf_common+0x8e>
	...

08000f54 <_printf_i>:
 8000f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f58:	7e0f      	ldrb	r7, [r1, #24]
 8000f5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000f5c:	2f78      	cmp	r7, #120	; 0x78
 8000f5e:	4691      	mov	r9, r2
 8000f60:	4680      	mov	r8, r0
 8000f62:	460c      	mov	r4, r1
 8000f64:	469a      	mov	sl, r3
 8000f66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000f6a:	d807      	bhi.n	8000f7c <_printf_i+0x28>
 8000f6c:	2f62      	cmp	r7, #98	; 0x62
 8000f6e:	d80a      	bhi.n	8000f86 <_printf_i+0x32>
 8000f70:	2f00      	cmp	r7, #0
 8000f72:	f000 80d4 	beq.w	800111e <_printf_i+0x1ca>
 8000f76:	2f58      	cmp	r7, #88	; 0x58
 8000f78:	f000 80c0 	beq.w	80010fc <_printf_i+0x1a8>
 8000f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f84:	e03a      	b.n	8000ffc <_printf_i+0xa8>
 8000f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f8a:	2b15      	cmp	r3, #21
 8000f8c:	d8f6      	bhi.n	8000f7c <_printf_i+0x28>
 8000f8e:	a101      	add	r1, pc, #4	; (adr r1, 8000f94 <_printf_i+0x40>)
 8000f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f94:	08000fed 	.word	0x08000fed
 8000f98:	08001001 	.word	0x08001001
 8000f9c:	08000f7d 	.word	0x08000f7d
 8000fa0:	08000f7d 	.word	0x08000f7d
 8000fa4:	08000f7d 	.word	0x08000f7d
 8000fa8:	08000f7d 	.word	0x08000f7d
 8000fac:	08001001 	.word	0x08001001
 8000fb0:	08000f7d 	.word	0x08000f7d
 8000fb4:	08000f7d 	.word	0x08000f7d
 8000fb8:	08000f7d 	.word	0x08000f7d
 8000fbc:	08000f7d 	.word	0x08000f7d
 8000fc0:	08001105 	.word	0x08001105
 8000fc4:	0800102d 	.word	0x0800102d
 8000fc8:	080010bf 	.word	0x080010bf
 8000fcc:	08000f7d 	.word	0x08000f7d
 8000fd0:	08000f7d 	.word	0x08000f7d
 8000fd4:	08001127 	.word	0x08001127
 8000fd8:	08000f7d 	.word	0x08000f7d
 8000fdc:	0800102d 	.word	0x0800102d
 8000fe0:	08000f7d 	.word	0x08000f7d
 8000fe4:	08000f7d 	.word	0x08000f7d
 8000fe8:	080010c7 	.word	0x080010c7
 8000fec:	682b      	ldr	r3, [r5, #0]
 8000fee:	1d1a      	adds	r2, r3, #4
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	602a      	str	r2, [r5, #0]
 8000ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e09f      	b.n	8001140 <_printf_i+0x1ec>
 8001000:	6820      	ldr	r0, [r4, #0]
 8001002:	682b      	ldr	r3, [r5, #0]
 8001004:	0607      	lsls	r7, r0, #24
 8001006:	f103 0104 	add.w	r1, r3, #4
 800100a:	6029      	str	r1, [r5, #0]
 800100c:	d501      	bpl.n	8001012 <_printf_i+0xbe>
 800100e:	681e      	ldr	r6, [r3, #0]
 8001010:	e003      	b.n	800101a <_printf_i+0xc6>
 8001012:	0646      	lsls	r6, r0, #25
 8001014:	d5fb      	bpl.n	800100e <_printf_i+0xba>
 8001016:	f9b3 6000 	ldrsh.w	r6, [r3]
 800101a:	2e00      	cmp	r6, #0
 800101c:	da03      	bge.n	8001026 <_printf_i+0xd2>
 800101e:	232d      	movs	r3, #45	; 0x2d
 8001020:	4276      	negs	r6, r6
 8001022:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001026:	485a      	ldr	r0, [pc, #360]	; (8001190 <_printf_i+0x23c>)
 8001028:	230a      	movs	r3, #10
 800102a:	e012      	b.n	8001052 <_printf_i+0xfe>
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	6820      	ldr	r0, [r4, #0]
 8001030:	1d19      	adds	r1, r3, #4
 8001032:	6029      	str	r1, [r5, #0]
 8001034:	0605      	lsls	r5, r0, #24
 8001036:	d501      	bpl.n	800103c <_printf_i+0xe8>
 8001038:	681e      	ldr	r6, [r3, #0]
 800103a:	e002      	b.n	8001042 <_printf_i+0xee>
 800103c:	0641      	lsls	r1, r0, #25
 800103e:	d5fb      	bpl.n	8001038 <_printf_i+0xe4>
 8001040:	881e      	ldrh	r6, [r3, #0]
 8001042:	4853      	ldr	r0, [pc, #332]	; (8001190 <_printf_i+0x23c>)
 8001044:	2f6f      	cmp	r7, #111	; 0x6f
 8001046:	bf0c      	ite	eq
 8001048:	2308      	moveq	r3, #8
 800104a:	230a      	movne	r3, #10
 800104c:	2100      	movs	r1, #0
 800104e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001052:	6865      	ldr	r5, [r4, #4]
 8001054:	60a5      	str	r5, [r4, #8]
 8001056:	2d00      	cmp	r5, #0
 8001058:	bfa2      	ittt	ge
 800105a:	6821      	ldrge	r1, [r4, #0]
 800105c:	f021 0104 	bicge.w	r1, r1, #4
 8001060:	6021      	strge	r1, [r4, #0]
 8001062:	b90e      	cbnz	r6, 8001068 <_printf_i+0x114>
 8001064:	2d00      	cmp	r5, #0
 8001066:	d04b      	beq.n	8001100 <_printf_i+0x1ac>
 8001068:	4615      	mov	r5, r2
 800106a:	fbb6 f1f3 	udiv	r1, r6, r3
 800106e:	fb03 6711 	mls	r7, r3, r1, r6
 8001072:	5dc7      	ldrb	r7, [r0, r7]
 8001074:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001078:	4637      	mov	r7, r6
 800107a:	42bb      	cmp	r3, r7
 800107c:	460e      	mov	r6, r1
 800107e:	d9f4      	bls.n	800106a <_printf_i+0x116>
 8001080:	2b08      	cmp	r3, #8
 8001082:	d10b      	bne.n	800109c <_printf_i+0x148>
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	07de      	lsls	r6, r3, #31
 8001088:	d508      	bpl.n	800109c <_printf_i+0x148>
 800108a:	6923      	ldr	r3, [r4, #16]
 800108c:	6861      	ldr	r1, [r4, #4]
 800108e:	4299      	cmp	r1, r3
 8001090:	bfde      	ittt	le
 8001092:	2330      	movle	r3, #48	; 0x30
 8001094:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001098:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800109c:	1b52      	subs	r2, r2, r5
 800109e:	6122      	str	r2, [r4, #16]
 80010a0:	f8cd a000 	str.w	sl, [sp]
 80010a4:	464b      	mov	r3, r9
 80010a6:	aa03      	add	r2, sp, #12
 80010a8:	4621      	mov	r1, r4
 80010aa:	4640      	mov	r0, r8
 80010ac:	f7ff fee4 	bl	8000e78 <_printf_common>
 80010b0:	3001      	adds	r0, #1
 80010b2:	d14a      	bne.n	800114a <_printf_i+0x1f6>
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b8:	b004      	add	sp, #16
 80010ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	f043 0320 	orr.w	r3, r3, #32
 80010c4:	6023      	str	r3, [r4, #0]
 80010c6:	4833      	ldr	r0, [pc, #204]	; (8001194 <_printf_i+0x240>)
 80010c8:	2778      	movs	r7, #120	; 0x78
 80010ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	6829      	ldr	r1, [r5, #0]
 80010d2:	061f      	lsls	r7, r3, #24
 80010d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80010d8:	d402      	bmi.n	80010e0 <_printf_i+0x18c>
 80010da:	065f      	lsls	r7, r3, #25
 80010dc:	bf48      	it	mi
 80010de:	b2b6      	uxthmi	r6, r6
 80010e0:	07df      	lsls	r7, r3, #31
 80010e2:	bf48      	it	mi
 80010e4:	f043 0320 	orrmi.w	r3, r3, #32
 80010e8:	6029      	str	r1, [r5, #0]
 80010ea:	bf48      	it	mi
 80010ec:	6023      	strmi	r3, [r4, #0]
 80010ee:	b91e      	cbnz	r6, 80010f8 <_printf_i+0x1a4>
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	f023 0320 	bic.w	r3, r3, #32
 80010f6:	6023      	str	r3, [r4, #0]
 80010f8:	2310      	movs	r3, #16
 80010fa:	e7a7      	b.n	800104c <_printf_i+0xf8>
 80010fc:	4824      	ldr	r0, [pc, #144]	; (8001190 <_printf_i+0x23c>)
 80010fe:	e7e4      	b.n	80010ca <_printf_i+0x176>
 8001100:	4615      	mov	r5, r2
 8001102:	e7bd      	b.n	8001080 <_printf_i+0x12c>
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	6826      	ldr	r6, [r4, #0]
 8001108:	6961      	ldr	r1, [r4, #20]
 800110a:	1d18      	adds	r0, r3, #4
 800110c:	6028      	str	r0, [r5, #0]
 800110e:	0635      	lsls	r5, r6, #24
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	d501      	bpl.n	8001118 <_printf_i+0x1c4>
 8001114:	6019      	str	r1, [r3, #0]
 8001116:	e002      	b.n	800111e <_printf_i+0x1ca>
 8001118:	0670      	lsls	r0, r6, #25
 800111a:	d5fb      	bpl.n	8001114 <_printf_i+0x1c0>
 800111c:	8019      	strh	r1, [r3, #0]
 800111e:	2300      	movs	r3, #0
 8001120:	6123      	str	r3, [r4, #16]
 8001122:	4615      	mov	r5, r2
 8001124:	e7bc      	b.n	80010a0 <_printf_i+0x14c>
 8001126:	682b      	ldr	r3, [r5, #0]
 8001128:	1d1a      	adds	r2, r3, #4
 800112a:	602a      	str	r2, [r5, #0]
 800112c:	681d      	ldr	r5, [r3, #0]
 800112e:	6862      	ldr	r2, [r4, #4]
 8001130:	2100      	movs	r1, #0
 8001132:	4628      	mov	r0, r5
 8001134:	f7ff f84c 	bl	80001d0 <memchr>
 8001138:	b108      	cbz	r0, 800113e <_printf_i+0x1ea>
 800113a:	1b40      	subs	r0, r0, r5
 800113c:	6060      	str	r0, [r4, #4]
 800113e:	6863      	ldr	r3, [r4, #4]
 8001140:	6123      	str	r3, [r4, #16]
 8001142:	2300      	movs	r3, #0
 8001144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001148:	e7aa      	b.n	80010a0 <_printf_i+0x14c>
 800114a:	6923      	ldr	r3, [r4, #16]
 800114c:	462a      	mov	r2, r5
 800114e:	4649      	mov	r1, r9
 8001150:	4640      	mov	r0, r8
 8001152:	47d0      	blx	sl
 8001154:	3001      	adds	r0, #1
 8001156:	d0ad      	beq.n	80010b4 <_printf_i+0x160>
 8001158:	6823      	ldr	r3, [r4, #0]
 800115a:	079b      	lsls	r3, r3, #30
 800115c:	d413      	bmi.n	8001186 <_printf_i+0x232>
 800115e:	68e0      	ldr	r0, [r4, #12]
 8001160:	9b03      	ldr	r3, [sp, #12]
 8001162:	4298      	cmp	r0, r3
 8001164:	bfb8      	it	lt
 8001166:	4618      	movlt	r0, r3
 8001168:	e7a6      	b.n	80010b8 <_printf_i+0x164>
 800116a:	2301      	movs	r3, #1
 800116c:	4632      	mov	r2, r6
 800116e:	4649      	mov	r1, r9
 8001170:	4640      	mov	r0, r8
 8001172:	47d0      	blx	sl
 8001174:	3001      	adds	r0, #1
 8001176:	d09d      	beq.n	80010b4 <_printf_i+0x160>
 8001178:	3501      	adds	r5, #1
 800117a:	68e3      	ldr	r3, [r4, #12]
 800117c:	9903      	ldr	r1, [sp, #12]
 800117e:	1a5b      	subs	r3, r3, r1
 8001180:	42ab      	cmp	r3, r5
 8001182:	dcf2      	bgt.n	800116a <_printf_i+0x216>
 8001184:	e7eb      	b.n	800115e <_printf_i+0x20a>
 8001186:	2500      	movs	r5, #0
 8001188:	f104 0619 	add.w	r6, r4, #25
 800118c:	e7f5      	b.n	800117a <_printf_i+0x226>
 800118e:	bf00      	nop
 8001190:	08001564 	.word	0x08001564
 8001194:	08001575 	.word	0x08001575

08001198 <__sflush_r>:
 8001198:	898a      	ldrh	r2, [r1, #12]
 800119a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800119e:	4605      	mov	r5, r0
 80011a0:	0710      	lsls	r0, r2, #28
 80011a2:	460c      	mov	r4, r1
 80011a4:	d458      	bmi.n	8001258 <__sflush_r+0xc0>
 80011a6:	684b      	ldr	r3, [r1, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dc05      	bgt.n	80011b8 <__sflush_r+0x20>
 80011ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	dc02      	bgt.n	80011b8 <__sflush_r+0x20>
 80011b2:	2000      	movs	r0, #0
 80011b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011ba:	2e00      	cmp	r6, #0
 80011bc:	d0f9      	beq.n	80011b2 <__sflush_r+0x1a>
 80011be:	2300      	movs	r3, #0
 80011c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80011c4:	682f      	ldr	r7, [r5, #0]
 80011c6:	6a21      	ldr	r1, [r4, #32]
 80011c8:	602b      	str	r3, [r5, #0]
 80011ca:	d032      	beq.n	8001232 <__sflush_r+0x9a>
 80011cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011ce:	89a3      	ldrh	r3, [r4, #12]
 80011d0:	075a      	lsls	r2, r3, #29
 80011d2:	d505      	bpl.n	80011e0 <__sflush_r+0x48>
 80011d4:	6863      	ldr	r3, [r4, #4]
 80011d6:	1ac0      	subs	r0, r0, r3
 80011d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011da:	b10b      	cbz	r3, 80011e0 <__sflush_r+0x48>
 80011dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011de:	1ac0      	subs	r0, r0, r3
 80011e0:	2300      	movs	r3, #0
 80011e2:	4602      	mov	r2, r0
 80011e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011e6:	6a21      	ldr	r1, [r4, #32]
 80011e8:	4628      	mov	r0, r5
 80011ea:	47b0      	blx	r6
 80011ec:	1c43      	adds	r3, r0, #1
 80011ee:	89a3      	ldrh	r3, [r4, #12]
 80011f0:	d106      	bne.n	8001200 <__sflush_r+0x68>
 80011f2:	6829      	ldr	r1, [r5, #0]
 80011f4:	291d      	cmp	r1, #29
 80011f6:	d82b      	bhi.n	8001250 <__sflush_r+0xb8>
 80011f8:	4a29      	ldr	r2, [pc, #164]	; (80012a0 <__sflush_r+0x108>)
 80011fa:	410a      	asrs	r2, r1
 80011fc:	07d6      	lsls	r6, r2, #31
 80011fe:	d427      	bmi.n	8001250 <__sflush_r+0xb8>
 8001200:	2200      	movs	r2, #0
 8001202:	6062      	str	r2, [r4, #4]
 8001204:	04d9      	lsls	r1, r3, #19
 8001206:	6922      	ldr	r2, [r4, #16]
 8001208:	6022      	str	r2, [r4, #0]
 800120a:	d504      	bpl.n	8001216 <__sflush_r+0x7e>
 800120c:	1c42      	adds	r2, r0, #1
 800120e:	d101      	bne.n	8001214 <__sflush_r+0x7c>
 8001210:	682b      	ldr	r3, [r5, #0]
 8001212:	b903      	cbnz	r3, 8001216 <__sflush_r+0x7e>
 8001214:	6560      	str	r0, [r4, #84]	; 0x54
 8001216:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001218:	602f      	str	r7, [r5, #0]
 800121a:	2900      	cmp	r1, #0
 800121c:	d0c9      	beq.n	80011b2 <__sflush_r+0x1a>
 800121e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001222:	4299      	cmp	r1, r3
 8001224:	d002      	beq.n	800122c <__sflush_r+0x94>
 8001226:	4628      	mov	r0, r5
 8001228:	f7ff fc96 	bl	8000b58 <_free_r>
 800122c:	2000      	movs	r0, #0
 800122e:	6360      	str	r0, [r4, #52]	; 0x34
 8001230:	e7c0      	b.n	80011b4 <__sflush_r+0x1c>
 8001232:	2301      	movs	r3, #1
 8001234:	4628      	mov	r0, r5
 8001236:	47b0      	blx	r6
 8001238:	1c41      	adds	r1, r0, #1
 800123a:	d1c8      	bne.n	80011ce <__sflush_r+0x36>
 800123c:	682b      	ldr	r3, [r5, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0c5      	beq.n	80011ce <__sflush_r+0x36>
 8001242:	2b1d      	cmp	r3, #29
 8001244:	d001      	beq.n	800124a <__sflush_r+0xb2>
 8001246:	2b16      	cmp	r3, #22
 8001248:	d101      	bne.n	800124e <__sflush_r+0xb6>
 800124a:	602f      	str	r7, [r5, #0]
 800124c:	e7b1      	b.n	80011b2 <__sflush_r+0x1a>
 800124e:	89a3      	ldrh	r3, [r4, #12]
 8001250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001254:	81a3      	strh	r3, [r4, #12]
 8001256:	e7ad      	b.n	80011b4 <__sflush_r+0x1c>
 8001258:	690f      	ldr	r7, [r1, #16]
 800125a:	2f00      	cmp	r7, #0
 800125c:	d0a9      	beq.n	80011b2 <__sflush_r+0x1a>
 800125e:	0793      	lsls	r3, r2, #30
 8001260:	680e      	ldr	r6, [r1, #0]
 8001262:	bf08      	it	eq
 8001264:	694b      	ldreq	r3, [r1, #20]
 8001266:	600f      	str	r7, [r1, #0]
 8001268:	bf18      	it	ne
 800126a:	2300      	movne	r3, #0
 800126c:	eba6 0807 	sub.w	r8, r6, r7
 8001270:	608b      	str	r3, [r1, #8]
 8001272:	f1b8 0f00 	cmp.w	r8, #0
 8001276:	dd9c      	ble.n	80011b2 <__sflush_r+0x1a>
 8001278:	6a21      	ldr	r1, [r4, #32]
 800127a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800127c:	4643      	mov	r3, r8
 800127e:	463a      	mov	r2, r7
 8001280:	4628      	mov	r0, r5
 8001282:	47b0      	blx	r6
 8001284:	2800      	cmp	r0, #0
 8001286:	dc06      	bgt.n	8001296 <__sflush_r+0xfe>
 8001288:	89a3      	ldrh	r3, [r4, #12]
 800128a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800128e:	81a3      	strh	r3, [r4, #12]
 8001290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001294:	e78e      	b.n	80011b4 <__sflush_r+0x1c>
 8001296:	4407      	add	r7, r0
 8001298:	eba8 0800 	sub.w	r8, r8, r0
 800129c:	e7e9      	b.n	8001272 <__sflush_r+0xda>
 800129e:	bf00      	nop
 80012a0:	dfbffffe 	.word	0xdfbffffe

080012a4 <_fflush_r>:
 80012a4:	b538      	push	{r3, r4, r5, lr}
 80012a6:	690b      	ldr	r3, [r1, #16]
 80012a8:	4605      	mov	r5, r0
 80012aa:	460c      	mov	r4, r1
 80012ac:	b913      	cbnz	r3, 80012b4 <_fflush_r+0x10>
 80012ae:	2500      	movs	r5, #0
 80012b0:	4628      	mov	r0, r5
 80012b2:	bd38      	pop	{r3, r4, r5, pc}
 80012b4:	b118      	cbz	r0, 80012be <_fflush_r+0x1a>
 80012b6:	6a03      	ldr	r3, [r0, #32]
 80012b8:	b90b      	cbnz	r3, 80012be <_fflush_r+0x1a>
 80012ba:	f7ff fb35 	bl	8000928 <__sinit>
 80012be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f3      	beq.n	80012ae <_fflush_r+0xa>
 80012c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80012c8:	07d0      	lsls	r0, r2, #31
 80012ca:	d404      	bmi.n	80012d6 <_fflush_r+0x32>
 80012cc:	0599      	lsls	r1, r3, #22
 80012ce:	d402      	bmi.n	80012d6 <_fflush_r+0x32>
 80012d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012d2:	f7ff fc3e 	bl	8000b52 <__retarget_lock_acquire_recursive>
 80012d6:	4628      	mov	r0, r5
 80012d8:	4621      	mov	r1, r4
 80012da:	f7ff ff5d 	bl	8001198 <__sflush_r>
 80012de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012e0:	07da      	lsls	r2, r3, #31
 80012e2:	4605      	mov	r5, r0
 80012e4:	d4e4      	bmi.n	80012b0 <_fflush_r+0xc>
 80012e6:	89a3      	ldrh	r3, [r4, #12]
 80012e8:	059b      	lsls	r3, r3, #22
 80012ea:	d4e1      	bmi.n	80012b0 <_fflush_r+0xc>
 80012ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012ee:	f7ff fc31 	bl	8000b54 <__retarget_lock_release_recursive>
 80012f2:	e7dd      	b.n	80012b0 <_fflush_r+0xc>

080012f4 <__swbuf_r>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	460e      	mov	r6, r1
 80012f8:	4614      	mov	r4, r2
 80012fa:	4605      	mov	r5, r0
 80012fc:	b118      	cbz	r0, 8001306 <__swbuf_r+0x12>
 80012fe:	6a03      	ldr	r3, [r0, #32]
 8001300:	b90b      	cbnz	r3, 8001306 <__swbuf_r+0x12>
 8001302:	f7ff fb11 	bl	8000928 <__sinit>
 8001306:	69a3      	ldr	r3, [r4, #24]
 8001308:	60a3      	str	r3, [r4, #8]
 800130a:	89a3      	ldrh	r3, [r4, #12]
 800130c:	071a      	lsls	r2, r3, #28
 800130e:	d525      	bpl.n	800135c <__swbuf_r+0x68>
 8001310:	6923      	ldr	r3, [r4, #16]
 8001312:	b31b      	cbz	r3, 800135c <__swbuf_r+0x68>
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	6922      	ldr	r2, [r4, #16]
 8001318:	1a98      	subs	r0, r3, r2
 800131a:	6963      	ldr	r3, [r4, #20]
 800131c:	b2f6      	uxtb	r6, r6
 800131e:	4283      	cmp	r3, r0
 8001320:	4637      	mov	r7, r6
 8001322:	dc04      	bgt.n	800132e <__swbuf_r+0x3a>
 8001324:	4621      	mov	r1, r4
 8001326:	4628      	mov	r0, r5
 8001328:	f7ff ffbc 	bl	80012a4 <_fflush_r>
 800132c:	b9e0      	cbnz	r0, 8001368 <__swbuf_r+0x74>
 800132e:	68a3      	ldr	r3, [r4, #8]
 8001330:	3b01      	subs	r3, #1
 8001332:	60a3      	str	r3, [r4, #8]
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	6022      	str	r2, [r4, #0]
 800133a:	701e      	strb	r6, [r3, #0]
 800133c:	6962      	ldr	r2, [r4, #20]
 800133e:	1c43      	adds	r3, r0, #1
 8001340:	429a      	cmp	r2, r3
 8001342:	d004      	beq.n	800134e <__swbuf_r+0x5a>
 8001344:	89a3      	ldrh	r3, [r4, #12]
 8001346:	07db      	lsls	r3, r3, #31
 8001348:	d506      	bpl.n	8001358 <__swbuf_r+0x64>
 800134a:	2e0a      	cmp	r6, #10
 800134c:	d104      	bne.n	8001358 <__swbuf_r+0x64>
 800134e:	4621      	mov	r1, r4
 8001350:	4628      	mov	r0, r5
 8001352:	f7ff ffa7 	bl	80012a4 <_fflush_r>
 8001356:	b938      	cbnz	r0, 8001368 <__swbuf_r+0x74>
 8001358:	4638      	mov	r0, r7
 800135a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800135c:	4621      	mov	r1, r4
 800135e:	4628      	mov	r0, r5
 8001360:	f000 f806 	bl	8001370 <__swsetup_r>
 8001364:	2800      	cmp	r0, #0
 8001366:	d0d5      	beq.n	8001314 <__swbuf_r+0x20>
 8001368:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800136c:	e7f4      	b.n	8001358 <__swbuf_r+0x64>
	...

08001370 <__swsetup_r>:
 8001370:	b538      	push	{r3, r4, r5, lr}
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <__swsetup_r+0xac>)
 8001374:	4605      	mov	r5, r0
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	460c      	mov	r4, r1
 800137a:	b118      	cbz	r0, 8001384 <__swsetup_r+0x14>
 800137c:	6a03      	ldr	r3, [r0, #32]
 800137e:	b90b      	cbnz	r3, 8001384 <__swsetup_r+0x14>
 8001380:	f7ff fad2 	bl	8000928 <__sinit>
 8001384:	89a3      	ldrh	r3, [r4, #12]
 8001386:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800138a:	0718      	lsls	r0, r3, #28
 800138c:	d422      	bmi.n	80013d4 <__swsetup_r+0x64>
 800138e:	06d9      	lsls	r1, r3, #27
 8001390:	d407      	bmi.n	80013a2 <__swsetup_r+0x32>
 8001392:	2309      	movs	r3, #9
 8001394:	602b      	str	r3, [r5, #0]
 8001396:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800139a:	81a3      	strh	r3, [r4, #12]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a0:	e034      	b.n	800140c <__swsetup_r+0x9c>
 80013a2:	0758      	lsls	r0, r3, #29
 80013a4:	d512      	bpl.n	80013cc <__swsetup_r+0x5c>
 80013a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013a8:	b141      	cbz	r1, 80013bc <__swsetup_r+0x4c>
 80013aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013ae:	4299      	cmp	r1, r3
 80013b0:	d002      	beq.n	80013b8 <__swsetup_r+0x48>
 80013b2:	4628      	mov	r0, r5
 80013b4:	f7ff fbd0 	bl	8000b58 <_free_r>
 80013b8:	2300      	movs	r3, #0
 80013ba:	6363      	str	r3, [r4, #52]	; 0x34
 80013bc:	89a3      	ldrh	r3, [r4, #12]
 80013be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013c2:	81a3      	strh	r3, [r4, #12]
 80013c4:	2300      	movs	r3, #0
 80013c6:	6063      	str	r3, [r4, #4]
 80013c8:	6923      	ldr	r3, [r4, #16]
 80013ca:	6023      	str	r3, [r4, #0]
 80013cc:	89a3      	ldrh	r3, [r4, #12]
 80013ce:	f043 0308 	orr.w	r3, r3, #8
 80013d2:	81a3      	strh	r3, [r4, #12]
 80013d4:	6923      	ldr	r3, [r4, #16]
 80013d6:	b94b      	cbnz	r3, 80013ec <__swsetup_r+0x7c>
 80013d8:	89a3      	ldrh	r3, [r4, #12]
 80013da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80013de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013e2:	d003      	beq.n	80013ec <__swsetup_r+0x7c>
 80013e4:	4621      	mov	r1, r4
 80013e6:	4628      	mov	r0, r5
 80013e8:	f000 f840 	bl	800146c <__smakebuf_r>
 80013ec:	89a0      	ldrh	r0, [r4, #12]
 80013ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013f2:	f010 0301 	ands.w	r3, r0, #1
 80013f6:	d00a      	beq.n	800140e <__swsetup_r+0x9e>
 80013f8:	2300      	movs	r3, #0
 80013fa:	60a3      	str	r3, [r4, #8]
 80013fc:	6963      	ldr	r3, [r4, #20]
 80013fe:	425b      	negs	r3, r3
 8001400:	61a3      	str	r3, [r4, #24]
 8001402:	6923      	ldr	r3, [r4, #16]
 8001404:	b943      	cbnz	r3, 8001418 <__swsetup_r+0xa8>
 8001406:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800140a:	d1c4      	bne.n	8001396 <__swsetup_r+0x26>
 800140c:	bd38      	pop	{r3, r4, r5, pc}
 800140e:	0781      	lsls	r1, r0, #30
 8001410:	bf58      	it	pl
 8001412:	6963      	ldrpl	r3, [r4, #20]
 8001414:	60a3      	str	r3, [r4, #8]
 8001416:	e7f4      	b.n	8001402 <__swsetup_r+0x92>
 8001418:	2000      	movs	r0, #0
 800141a:	e7f7      	b.n	800140c <__swsetup_r+0x9c>
 800141c:	20000058 	.word	0x20000058

08001420 <__swhatbuf_r>:
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	460c      	mov	r4, r1
 8001424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001428:	2900      	cmp	r1, #0
 800142a:	b096      	sub	sp, #88	; 0x58
 800142c:	4615      	mov	r5, r2
 800142e:	461e      	mov	r6, r3
 8001430:	da0d      	bge.n	800144e <__swhatbuf_r+0x2e>
 8001432:	89a3      	ldrh	r3, [r4, #12]
 8001434:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001438:	f04f 0100 	mov.w	r1, #0
 800143c:	bf0c      	ite	eq
 800143e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001442:	2340      	movne	r3, #64	; 0x40
 8001444:	2000      	movs	r0, #0
 8001446:	6031      	str	r1, [r6, #0]
 8001448:	602b      	str	r3, [r5, #0]
 800144a:	b016      	add	sp, #88	; 0x58
 800144c:	bd70      	pop	{r4, r5, r6, pc}
 800144e:	466a      	mov	r2, sp
 8001450:	f000 f848 	bl	80014e4 <_fstat_r>
 8001454:	2800      	cmp	r0, #0
 8001456:	dbec      	blt.n	8001432 <__swhatbuf_r+0x12>
 8001458:	9901      	ldr	r1, [sp, #4]
 800145a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800145e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001462:	4259      	negs	r1, r3
 8001464:	4159      	adcs	r1, r3
 8001466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800146a:	e7eb      	b.n	8001444 <__swhatbuf_r+0x24>

0800146c <__smakebuf_r>:
 800146c:	898b      	ldrh	r3, [r1, #12]
 800146e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001470:	079d      	lsls	r5, r3, #30
 8001472:	4606      	mov	r6, r0
 8001474:	460c      	mov	r4, r1
 8001476:	d507      	bpl.n	8001488 <__smakebuf_r+0x1c>
 8001478:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800147c:	6023      	str	r3, [r4, #0]
 800147e:	6123      	str	r3, [r4, #16]
 8001480:	2301      	movs	r3, #1
 8001482:	6163      	str	r3, [r4, #20]
 8001484:	b002      	add	sp, #8
 8001486:	bd70      	pop	{r4, r5, r6, pc}
 8001488:	ab01      	add	r3, sp, #4
 800148a:	466a      	mov	r2, sp
 800148c:	f7ff ffc8 	bl	8001420 <__swhatbuf_r>
 8001490:	9900      	ldr	r1, [sp, #0]
 8001492:	4605      	mov	r5, r0
 8001494:	4630      	mov	r0, r6
 8001496:	f7ff f92f 	bl	80006f8 <_malloc_r>
 800149a:	b948      	cbnz	r0, 80014b0 <__smakebuf_r+0x44>
 800149c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014a0:	059a      	lsls	r2, r3, #22
 80014a2:	d4ef      	bmi.n	8001484 <__smakebuf_r+0x18>
 80014a4:	f023 0303 	bic.w	r3, r3, #3
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	81a3      	strh	r3, [r4, #12]
 80014ae:	e7e3      	b.n	8001478 <__smakebuf_r+0xc>
 80014b0:	89a3      	ldrh	r3, [r4, #12]
 80014b2:	6020      	str	r0, [r4, #0]
 80014b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b8:	81a3      	strh	r3, [r4, #12]
 80014ba:	9b00      	ldr	r3, [sp, #0]
 80014bc:	6163      	str	r3, [r4, #20]
 80014be:	9b01      	ldr	r3, [sp, #4]
 80014c0:	6120      	str	r0, [r4, #16]
 80014c2:	b15b      	cbz	r3, 80014dc <__smakebuf_r+0x70>
 80014c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014c8:	4630      	mov	r0, r6
 80014ca:	f000 f81d 	bl	8001508 <_isatty_r>
 80014ce:	b128      	cbz	r0, 80014dc <__smakebuf_r+0x70>
 80014d0:	89a3      	ldrh	r3, [r4, #12]
 80014d2:	f023 0303 	bic.w	r3, r3, #3
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	81a3      	strh	r3, [r4, #12]
 80014dc:	89a3      	ldrh	r3, [r4, #12]
 80014de:	431d      	orrs	r5, r3
 80014e0:	81a5      	strh	r5, [r4, #12]
 80014e2:	e7cf      	b.n	8001484 <__smakebuf_r+0x18>

080014e4 <_fstat_r>:
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	4d07      	ldr	r5, [pc, #28]	; (8001504 <_fstat_r+0x20>)
 80014e8:	2300      	movs	r3, #0
 80014ea:	4604      	mov	r4, r0
 80014ec:	4608      	mov	r0, r1
 80014ee:	4611      	mov	r1, r2
 80014f0:	602b      	str	r3, [r5, #0]
 80014f2:	f7ff f83a 	bl	800056a <_fstat>
 80014f6:	1c43      	adds	r3, r0, #1
 80014f8:	d102      	bne.n	8001500 <_fstat_r+0x1c>
 80014fa:	682b      	ldr	r3, [r5, #0]
 80014fc:	b103      	cbz	r3, 8001500 <_fstat_r+0x1c>
 80014fe:	6023      	str	r3, [r4, #0]
 8001500:	bd38      	pop	{r3, r4, r5, pc}
 8001502:	bf00      	nop
 8001504:	200001c0 	.word	0x200001c0

08001508 <_isatty_r>:
 8001508:	b538      	push	{r3, r4, r5, lr}
 800150a:	4d06      	ldr	r5, [pc, #24]	; (8001524 <_isatty_r+0x1c>)
 800150c:	2300      	movs	r3, #0
 800150e:	4604      	mov	r4, r0
 8001510:	4608      	mov	r0, r1
 8001512:	602b      	str	r3, [r5, #0]
 8001514:	f7ff f839 	bl	800058a <_isatty>
 8001518:	1c43      	adds	r3, r0, #1
 800151a:	d102      	bne.n	8001522 <_isatty_r+0x1a>
 800151c:	682b      	ldr	r3, [r5, #0]
 800151e:	b103      	cbz	r3, 8001522 <_isatty_r+0x1a>
 8001520:	6023      	str	r3, [r4, #0]
 8001522:	bd38      	pop	{r3, r4, r5, pc}
 8001524:	200001c0 	.word	0x200001c0

08001528 <_init>:
 8001528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152a:	bf00      	nop
 800152c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800152e:	bc08      	pop	{r3}
 8001530:	469e      	mov	lr, r3
 8001532:	4770      	bx	lr

08001534 <_fini>:
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001536:	bf00      	nop
 8001538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153a:	bc08      	pop	{r3}
 800153c:	469e      	mov	lr, r3
 800153e:	4770      	bx	lr
